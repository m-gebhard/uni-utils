{
  "api/UniUtils.Data.Batcher.html": {
    "href": "api/UniUtils.Data.Batcher.html",
    "title": "Class Batcher | UniUtils Documentation",
    "keywords": "Class Batcher Provides utility methods for processing items in batches with support for callbacks and error handling. Inheritance System.Object Batcher Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public static class Batcher Methods ProcessInBatches<T>(IReadOnlyList<T>, Action<T>, Int32, Single, Action<T>, Action<T, Boolean>, Action<IReadOnlyList<T>>, Action<IReadOnlyList<T>>, Action<IReadOnlyList<T>>, Action<T, Exception>) Executes an action on a list of items in batches, with optional callbacks for various stages of processing. Declaration public static IEnumerator ProcessInBatches<T>(IReadOnlyList<T> itemsList, Action<T> actionOnItem, int itemsPerBatch = 5, float batchDelay = 0.1F, Action<T> onItemProcessStart = null, Action<T, bool> onItemProcessFinished = null, Action<IReadOnlyList<T>> onBatchStart = null, Action<IReadOnlyList<T>> onBatchFinished = null, Action<IReadOnlyList<T>> onFinished = null, Action<T, Exception> onError = null) Parameters Type Name Description IReadOnlyList <T> itemsList The list of items to process. Action <T> actionOnItem The action to execute on each item. System.Int32 itemsPerBatch The number of items to process per batch. Defaults to 5. System.Single batchDelay The delay (in seconds) between processing batches. Defaults to 0.1f. Action <T> onItemProcessStart Optional callback invoked before processing each item; receives the item as T . Action <T, System.Boolean > onItemProcessFinished Optional callback invoked after processing each item; receives the item as T and a bool indicating success. Action < IReadOnlyList <T>> onBatchStart Optional callback invoked before processing each batch; receives the batch as IReadOnlyList<T> . Action < IReadOnlyList <T>> onBatchFinished Optional callback invoked when a batch is completed; receives the batch as IReadOnlyList<T> . Action < IReadOnlyList <T>> onFinished Optional callback invoked when all items have been processed; receives the full list of processed items as IReadOnlyList<T> . Action <T, Exception > onError Optional callback invoked when an error occurs during item processing; receives the item that failed ( T ) and the thrown Exception . Returns Type Description IEnumerator An enumerator that can be used to execute the batches over time. Type Parameters Name Description T The type of items in the list. Examples IReadOnlyList<int> numbers = new IReadOnlyList<int>() { 1, 2, 3, 4, 5, 6, 7 }; StartCoroutine(Batcher.ProcessInBatches( numbers, n => Debug.Log($\"Processing: {n}\"), itemsPerBatch: 3, batchDelay: 0.5f, onBatchStart: batch => Debug.Log($\"Batch starting: {string.Join(\", \", batch)}\"), onBatchFinished: batch => Debug.Log($\"Batch finished: {string.Join(\", \", batch)}\"), onFinished: all => Debug.Log(\"All items processed.\") )); Exceptions Type Condition System.ArgumentNullException Thrown if actionOnItem is null. ProcessPreBatched<T>(IReadOnlyList<IReadOnlyList<T>>, Action<T>, Single, Action<T>, Action<T, Boolean>, Action<IReadOnlyList<T>>, Action<IReadOnlyList<T>>, Action<IReadOnlyList<T>>, Action<T, Exception>) Executes an action on pre-batched lists of items, with optional callbacks for various stages of processing. Declaration public static IEnumerator ProcessPreBatched<T>(IReadOnlyList<IReadOnlyList<T>> preBatchedLists, Action<T> actionOnItem, float batchDelay = 0.1F, Action<T> onItemProcessStart = null, Action<T, bool> onItemProcessFinished = null, Action<IReadOnlyList<T>> onBatchStart = null, Action<IReadOnlyList<T>> onBatchFinished = null, Action<IReadOnlyList<T>> onFinished = null, Action<T, Exception> onError = null) Parameters Type Name Description IReadOnlyList < IReadOnlyList <T>> preBatchedLists The pre-batched lists of items to process. Action <T> actionOnItem The action to execute on each item. System.Single batchDelay The delay (in seconds) between processing batches. Defaults to 0.1f. Action <T> onItemProcessStart Optional callback invoked before processing each item; receives the item as T . Action <T, System.Boolean > onItemProcessFinished Optional callback invoked after processing each item; receives the item as T and a bool indicating success. Action < IReadOnlyList <T>> onBatchStart Optional callback invoked before processing each batch; receives the batch as IReadOnlyList<T> . Action < IReadOnlyList <T>> onBatchFinished Optional callback invoked when a batch is completed; receives the batch as IReadOnlyList<T> . Action < IReadOnlyList <T>> onFinished Optional callback invoked when all items have been processed; receives the full list of processed items as IReadOnlyList<T> . Action <T, Exception > onError Optional callback invoked when an error occurs during item processing; receives the item that failed ( T ) and the thrown Exception . Returns Type Description IEnumerator An enumerator that can be used to execute the batches over time. Type Parameters Name Description T The type of items in the batches. Examples IReadOnlyList<IReadOnlyList<int>> batches = new IReadOnlyList<IReadOnlyList<int>>() { new IReadOnlyList<int>() { 1, 2, 3 }, new IReadOnlyList<int>() { 4, 5, 6 }, new IReadOnlyList<int>() { 7 } }; StartCoroutine(Batcher.ProcessPreBatched( batches, n => Debug.Log($\"Processing: {n}\"), batchDelay: 0.5f, onBatchStart: batch => Debug.Log($\"Batch starting: {string.Join(\", \", batch)}\"), onBatchFinished: batch => Debug.Log($\"Batch finished: {string.Join(\", \", batch)}\"), onFinished: all => Debug.Log(\"All items processed.\") )); Exceptions Type Condition System.ArgumentNullException Thrown if actionOnItem is null."
  },
  "api/UniUtils.Data.CacheDictionary-2.html": {
    "href": "api/UniUtils.Data.CacheDictionary-2.html",
    "title": "Class CacheDictionary<TKey, T> | UniUtils Documentation",
    "keywords": "Class CacheDictionary<TKey, T> Represents a dictionary that caches items and provides methods to manage the cache. Inheritance System.Object CacheDictionary<TKey, T> Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public abstract class CacheDictionary<TKey, T> : EphemeralSingleton<CacheDictionary<TKey, T>> Type Parameters Name Description TKey The type of the key used in the dictionary. T The type of the value stored in the dictionary. Examples Example of using a cache to store surface types based on a ground transform: public class SurfaceType { public string type; } public class GroundSurfaceCache : CacheDictionary<Transform, string> { } public class Player { public void OnFootstep(Transform groundTransform) { string surfaceType = GroundSurfaceCache.Instance.GetOrAdd( groundTransform, transform => transform.GetComponent<SurfaceType>()?.type, discardNullValue: true ); Debug.Log(\"Footstep on surface: \" + surfaceType); } } Methods AddCachedItem(TKey, T) Adds or updates an item in the cache. Declaration public void AddCachedItem(TKey key, T value) Parameters Type Name Description TKey key The key of the item to add or update. T value The value to associate with the key. ClearCache() Clears all items from the cache. Declaration public void ClearCache() ContainsKey(TKey) Determines whether the cache contains the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to check for existence. Returns Type Description System.Boolean true if the key exists in the cache; otherwise, false . GetOrAdd(TKey, Func<TKey, T>, Boolean) Retrieves a value from the cache or adds it using the specified factory function if it does not exist. Declaration public T GetOrAdd(TKey key, Func<TKey, T> valueFactory, bool discardNullValue = true) Parameters Type Name Description TKey key The key to retrieve or add. Func <TKey, T> valueFactory The function used to create the value if it does not exist. System.Boolean discardNullValue Indicates whether to discard null values. Defaults to true . Returns Type Description T The value associated with the key. RemoveCachedItem(TKey) Removes an item from the cache. Declaration public void RemoveCachedItem(TKey key) Parameters Type Name Description TKey key The key of the item to remove. TryGetValue(TKey, out T) Attempts to retrieve a value from the cache. Declaration public bool TryGetValue(TKey key, out T value) Parameters Type Name Description TKey key The key to retrieve. T value When this method returns, contains the value associated with the key if found; otherwise, the default value for the type of the value parameter. Returns Type Description System.Boolean true if the key exists in the cache; otherwise, false ."
  },
  "api/UniUtils.Data.Crypter.html": {
    "href": "api/UniUtils.Data.Crypter.html",
    "title": "Class Crypter | UniUtils Documentation",
    "keywords": "Class Crypter Provides methods for encrypting and decrypting strings using a simple XOR-based algorithm. Inheritance System.Object Crypter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public class Crypter Methods Decrypt(Byte[], String) Decrypts a byte array using a XOR-based algorithm and returns the decrypted string. Declaration public static string Decrypt(byte[] encryptedBytes, string encryptionKey) Parameters Type Name Description System.Byte [] encryptedBytes The byte array containing the encrypted data. System.String encryptionKey The encryption key used for the XOR operation. Returns Type Description System.String The decrypted string. Examples string text = \"HelloWorld\"; string key = \"k\"; byte[] encrypted = Crypter.Encrypt(text, key); string decrypted = Crypter.Decrypt(encrypted, key); Debug.Log(decrypted); // \"HelloWorld\" DecryptFromBase64(String, String) Decrypts a Base64-encoded string using a XOR-based algorithm and returns the decrypted string. Declaration public static string DecryptFromBase64(string encryptedBase64, string encryptionKey) Parameters Type Name Description System.String encryptedBase64 The Base64-encoded string containing the encrypted data. System.String encryptionKey The encryption key used for the XOR operation. Returns Type Description System.String The decrypted string. Examples string key = \"secret\"; string encrypted = Crypter.EncryptToBase64(\"HiddenMessage\", key); string decrypted = Crypter.DecryptFromBase64(encrypted, key); Debug.Log(decrypted); // Outputs: \"HiddenMessage\" Encrypt(String, String) Encrypts a string using a XOR-based algorithm and returns the encrypted data as a byte array. Declaration public static byte[] Encrypt(string input, string encryptionKey) Parameters Type Name Description System.String input The input string to encrypt. System.String encryptionKey The encryption key used for the XOR operation. Returns Type Description System.Byte [] A byte array containing the encrypted data. Examples string original = \"Secret123\"; string key = \"key!\"; byte[] encrypted = Crypter.Encrypt(original, key); // encrypted contains binary data EncryptToBase64(String, String) Encrypts a string using a XOR-based algorithm and returns the encrypted data as a Base64-encoded string. Declaration public static string EncryptToBase64(string input, string encryptionKey) Parameters Type Name Description System.String input The input string to encrypt. System.String encryptionKey The encryption key used for the XOR operation. Returns Type Description System.String A Base64-encoded string containing the encrypted data. Examples string secret = \"MyPassword\"; string key = \"abc123\"; string encryptedBase64 = Crypter.EncryptToBase64(secret, key); Debug.Log(encryptedBase64); // Outputs something like: \"GhoaFh1R...\""
  },
  "api/UniUtils.Data.EStorageLocation.html": {
    "href": "api/UniUtils.Data.EStorageLocation.html",
    "title": "Enum EStorageLocation | UniUtils Documentation",
    "keywords": "Enum EStorageLocation Specifies the storage location for files within the application. Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public enum EStorageLocation Fields Name Description DataPath (Application.dataPath) Represents the application's data path, often used for accessing files bundled with the application. Persistent (Application.persistentDataPath) Represents the persistent storage location, typically used for saving data that should remain across application sessions. StreamingAssets (Application.streamingAssetsPath) Represents the streaming assets folder, often used for accessing read-only data bundled with the application. Temporary (Application.temporaryCachePath) Represents a temporary storage location, typically used for storing data that does not need to persist."
  },
  "api/UniUtils.Data.FadeTransitions.html": {
    "href": "api/UniUtils.Data.FadeTransitions.html",
    "title": "Class FadeTransitions | UniUtils Documentation",
    "keywords": "Class FadeTransitions Utility class for different transitions of various types. Inheritance System.Object FadeTransitions Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public class FadeTransitions : MonoBehaviour Methods FadeLightColor(Light, Color, Single) Coroutine to fade a light's color over time. Declaration public static IEnumerator FadeLightColor(Light targetLight, Color targetColor, float duration = 1F) Parameters Type Name Description Light targetLight The light to modify. Color targetColor The target color to fade to. System.Single duration The duration of the fade in seconds. Returns Type Description IEnumerator An IEnumerator for use in a coroutine. Examples // Example: Fade a light's color to blue over 2 seconds. StartCoroutine(FadeTransitions.FadeLightColor( targetLight: myLight, targetColor: Color.blue, duration: 2f )); FadeLightIntensity(Light, Single, Single) Coroutine to fade a light's intensity over time. Declaration public static IEnumerator FadeLightIntensity(Light targetLight, float targetIntensity, float duration = 1F) Parameters Type Name Description Light targetLight The light to modify. System.Single targetIntensity The target intensity to fade to. System.Single duration The duration of the fade in seconds. Returns Type Description IEnumerator An IEnumerator for use in a coroutine. Examples // Example: Fade a light's intensity to 0 over 1.5 seconds. StartCoroutine(FadeTransitions.FadeLightIntensity( targetLight: myLight, targetIntensity: 0f, duration: 1.5f )); FadeMaterialColor(Material, Color, String, Single) Coroutine to fade a material's color property over time. Declaration public static IEnumerator FadeMaterialColor(Material targetMaterial, Color targetColor, string fieldName = \"_EmissionColor\", float duration = 1F) Parameters Type Name Description Material targetMaterial The material to modify. Color targetColor The target color to fade to. System.String fieldName The name of the color property to modify (default is \"_EmissionColor\"). System.Single duration The duration of the fade in seconds. Returns Type Description IEnumerator An IEnumerator for use in a coroutine. Examples // Example: Fade a material's emission color to red over 3 seconds. StartCoroutine(FadeTransitions.FadeMaterialColor( targetMaterial: myRenderer.material, targetColor: Color.red, fieldName: \"_EmissionColor\", duration: 3f )); FadeValue<T>(Func<T>, Action<T>, T, Func<T, T, Single, T>, Single) Generic coroutine to fade a value over time. Declaration public static IEnumerator FadeValue<T>(Func<T> getter, Action<T> setter, T targetValue, Func<T, T, float, T> lerpFunc, float duration = 1F) Parameters Type Name Description Func <T> getter Function to get the current value. Action <T> setter Action to set the new value. T targetValue The target value to fade to. Func <T, T, System.Single , T> lerpFunc Function to interpolate between values. System.Single duration The duration of the fade in seconds. Returns Type Description IEnumerator An IEnumerator for use in a coroutine. Type Parameters Name Description T The type of the value to fade. Examples // Example: Fade a float value from 0 to 1 over 2 seconds. StartCoroutine(FadeTransitions.FadeValue( getter: () => someValue, setter: val => someValue = val, targetValue: 1f, lerpFunc: Mathf.Lerp, duration: 2f ));"
  },
  "api/UniUtils.Data.FileHandle.html": {
    "href": "api/UniUtils.Data.FileHandle.html",
    "title": "Class FileHandle | UniUtils Documentation",
    "keywords": "Class FileHandle Represents a file handle that provides methods for file operations such as reading, writing, and deleting files. Inheritance System.Object FileHandle Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public class FileHandle Constructors FileHandle(String, EStorageLocation) Initializes a new instance of the FileHandle class with the specified relative path and storage location. Ensures the directory for the file exists. Declaration public FileHandle(string relativePath, EStorageLocation location = EStorageLocation.Persistent) Parameters Type Name Description System.String relativePath The relative path of the file. EStorageLocation location The storage location. Defaults to Persistent . Properties Exists Declaration public virtual bool Exists { get; } Property Value Type Description System.Boolean Returns true if the file exists; otherwise, false . Extension Declaration public string Extension { get; } Property Value Type Description System.String Returns the file extension. FileName Declaration public virtual string FileName { get; } Property Value Type Description System.String The name of the file without the directory path. FullPath Declaration public virtual string FullPath { get; } Property Value Type Description System.String The full path to the file, including the directory and file name. IsReadOnly Declaration public virtual bool IsReadOnly { get; } Property Value Type Description System.Boolean Returns true if the file is read-only; otherwise, false . Location Declaration public virtual EStorageLocation Location { get; } Property Value Type Description EStorageLocation The storage location of the file, such as Persistent . RelativePath Declaration public virtual string RelativePath { get; } Property Value Type Description System.String The relative path of the file from the root of the specified storage location. Methods AppendText(String) Appends the specified text content to the file. Declaration public virtual bool AppendText(string content) Parameters Type Name Description System.String content The text content to append to the file. Returns Type Description System.Boolean true if the operation was successful; otherwise, false . Examples FileHandle handle = new FileHandle(\"log.txt\"); handle.AppendText(\"Log entry\\n\"); Exceptions Type Condition System.IO.IOException Thrown if appending to the file fails. Copy(String, Nullable<EStorageLocation>, Boolean) Copies the current file to a new location and returns a new FileHandle instance for the copied file. Declaration public virtual FileHandle Copy(string newRelativePath, EStorageLocation? location = null, bool canOverwrite = false) Parameters Type Name Description System.String newRelativePath The relative path for the new file location. System.Nullable < EStorageLocation > location The storage location for the new file. If null , the current file's location is used. System.Boolean canOverwrite If true , allows overwriting an existing file at the new location; otherwise, throws an error if the target file already exists. Returns Type Description FileHandle A new FileHandle instance representing the copied file, or null if the operation fails. Examples FileHandle file = new FileHandle(\"data/source.txt\"); FileHandle copiedFile = file.Copy(\"data/destination.txt\", canOverwrite: true); Exceptions Type Condition System.ArgumentException Thrown if the new relative path is invalid. System.IO.FileNotFoundException Thrown if the file does not exist. System.IO.IOException Thrown if writing to the file fails. Delete() Deletes the current file. Declaration public virtual bool Delete() Returns Type Description System.Boolean true if the file was successfully deleted; otherwise, false . Examples FileHandle handle = new FileHandle(\"temp/data.txt\"); handle.Delete(); Exceptions Type Condition System.IO.IOException Thrown if the delete operation fails. Dump() Logs the contents of the file to the Unity console. Declaration public void Dump() Examples FileHandle handle = new FileHandle(\"logs/output.txt\"); handle.Dump(); // Logs file contents to Unity console. FileSizeBytes() Declaration public virtual long FileSizeBytes() Returns Type Description System.Int64 Returns the size of the file in bytes, or 0 if the file does not exist. LastModified() Declaration public virtual DateTime? LastModified() Returns Type Description System.Nullable < DateTime > Returns the last modified date and time of the file, or null if the file does not exist. Move(String, Nullable<EStorageLocation>, Boolean) Moves the current file to a new location and returns a new FileHandle instance for the moved file. Declaration public virtual FileHandle Move(string newRelativePath, EStorageLocation? location = null, bool canOverwrite = false) Parameters Type Name Description System.String newRelativePath The relative path for the new file location. System.Nullable < EStorageLocation > location System.Boolean canOverwrite If true , allows overwriting an existing file at the new location; otherwise, throws an error if the target file already exists. Returns Type Description FileHandle A new FileHandle instance representing the moved file, or null if the operation fails. Examples FileHandle file = new FileHandle(\"data/oldname.txt\"); FileHandle movedFile = file.Move(\"data/newname.txt\", canOverwrite: true); Exceptions Type Condition System.IO.FileNotFoundException Thrown if the file does not exist. System.ArgumentException Thrown if the new relative path is invalid. System.IO.IOException Thrown if the target file already exists. System.IO.IOException Thrown if writing to the file fails. OpenReadStream() Opens and returns a read-only FileStream for this file. Declaration public virtual FileStream OpenReadStream() Returns Type Description FileStream A System.IO.FileStream opened for read. Examples FileHandle handle = new FileHandle(\"data.txt\"); using (FileStream stream = handle.OpenReadStream()) { // Read from stream } Exceptions Type Condition System.IO.FileNotFoundException Thrown if the file does not exist. OpenWriteStream(Boolean) Opens and returns a write-only FileStream for this file. Declaration public virtual FileStream OpenWriteStream(bool overwrite = true) Parameters Type Name Description System.Boolean overwrite If true, the file will be recreated; if false, data will be appended. Returns Type Description FileStream A System.IO.FileStream opened for write. Examples FileHandle handle = new FileHandle(\"log.txt\"); using (FileStream stream = handle.OpenWriteStream(overwrite: true)) { byte[] bytes = Encoding.UTF8.GetBytes(\"Hello\"); stream.Write(bytes, 0, bytes.Length); } ReadBytes() Reads the content of the file as a byte array. Declaration public virtual byte[] ReadBytes() Returns Type Description System.Byte [] The content of the file as a byte array, or null if the file does not exist. Examples FileHandle handle = new FileHandle(\"data.bin\"); byte[] data = handle.ReadBytes(); Exceptions Type Condition System.IO.IOException Thrown if the file cannot be read. ReadText() Reads the content of the file as a string. Declaration public virtual string ReadText() Returns Type Description System.String The content of the file as a string, or null if the file does not exist. Examples FileHandle handle = new FileHandle(\"log.txt\"); string content = handle.ReadText(); Debug.Log(content); Exceptions Type Condition System.IO.IOException Thrown if the file cannot be read. Rename(String, Boolean) Renames the current file by moving it to a new name within the same directory. Declaration public virtual FileHandle Rename(string newName, bool canOverwrite = false) Parameters Type Name Description System.String newName The new name for the file. System.Boolean canOverwrite If true , allows overwriting an existing file with the new name; otherwise, throws an error if the target file already exists. Returns Type Description FileHandle A new FileHandle instance representing the renamed file, or null if the operation fails. ToString() Returns the full path of the file as a string. Declaration public override string ToString() Returns Type Description System.String The full path of the file. Overrides System.Object.ToString() WriteBytes(Byte[]) Writes the specified byte array content to the file, overwriting any existing content. Declaration public virtual bool WriteBytes(byte[] content) Parameters Type Name Description System.Byte [] content The byte array content to write to the file. Returns Type Description System.Boolean true if the operation was successful; otherwise, false . Examples FileHandle handle = new FileHandle(\"binary.bin\"); handle.WriteBytes(new byte[] { 1, 2, 3 }); Exceptions Type Condition System.IO.IOException Thrown if writing to the file fails. WriteText(String) Writes the specified text content to the file, overwriting any existing content. Declaration public virtual bool WriteText(string content) Parameters Type Name Description System.String content The text content to write to the file. Returns Type Description System.Boolean true if the operation was successful; otherwise, false . Examples FileHandle handle = new FileHandle(\"output.txt\"); handle.WriteText(\"Hello, world!\"); Exceptions Type Condition System.IO.IOException Thrown if writing to the file fails. WriteText(String, Encoding) Writes the specified text content to the file using the provided encoding, overwriting any existing content. Declaration public virtual bool WriteText(string content, Encoding encoding) Parameters Type Name Description System.String content The text content to write to the file. Encoding encoding The encoding to use when writing the text content. Returns Type Description System.Boolean true if the operation was successful; otherwise, false . Examples FileHandle handle = new FileHandle(\"utf8.txt\"); handle.WriteText(\"Hello\", Encoding.UTF8); Exceptions Type Condition System.IO.IOException Thrown if writing to the file fails."
  },
  "api/UniUtils.Data.FileHandleComparer.html": {
    "href": "api/UniUtils.Data.FileHandleComparer.html",
    "title": "Class FileHandleComparer | UniUtils Documentation",
    "keywords": "Class FileHandleComparer Provides methods to compare two FileHandle objects for equality based on their full paths. Inheritance System.Object FileHandleComparer Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public class FileHandleComparer : IEqualityComparer<FileHandle> Methods Equals(FileHandle, FileHandle) Determines whether the specified FileHandle objects are equal by comparing their full paths. Declaration public bool Equals(FileHandle x, FileHandle y) Parameters Type Name Description FileHandle x The first FileHandle to compare. FileHandle y The second FileHandle to compare. Returns Type Description System.Boolean true if the full paths of both FileHandle objects are equal; otherwise, false . GetHashCode(FileHandle) Declaration public int GetHashCode(FileHandle obj) Parameters Type Name Description FileHandle obj Returns Type Description System.Int32"
  },
  "api/UniUtils.Data.FileManager.html": {
    "href": "api/UniUtils.Data.FileManager.html",
    "title": "Class FileManager | UniUtils Documentation",
    "keywords": "Class FileManager Provides utility methods for managing files and directories within different storage locations. Inheritance System.Object FileManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public static class FileManager Methods ClearDirectory(String, EStorageLocation) Deletes all contents of a directory without deleting the directory itself. Declaration public static void ClearDirectory(string relativePath, EStorageLocation location = EStorageLocation.Persistent) Parameters Type Name Description System.String relativePath The relative path of the directory to clear. EStorageLocation location The storage location. Defaults to Persistent . Examples FileManager.ClearDirectory(\"Cache\"); Exceptions Type Condition System.IO.IOException Thrown if file or directory deletion fails. System.UnauthorizedAccessException Thrown if the operation lacks necessary permissions. CopyDirectory(String, String, EStorageLocation) Copies the contents of a source directory to a target directory within a specified storage location. Declaration public static bool CopyDirectory(string sourceRelativePath, string targetRelativePath, EStorageLocation location = EStorageLocation.Persistent) Parameters Type Name Description System.String sourceRelativePath The relative path of the source directory. System.String targetRelativePath The relative path of the target directory. EStorageLocation location The storage location to use. Defaults to Persistent . Returns Type Description System.Boolean true if the copy was successful; otherwise throws an exception. Examples FileManager.CopyDirectory(\"Configs\", \"Backup/Configs\"); Exceptions Type Condition System.IO.DirectoryNotFoundException Thrown if the source directory does not exist. System.IO.IOException Thrown if copying fails due to IO errors. System.UnauthorizedAccessException Thrown if the operation lacks necessary permissions. DeleteDirectory(String, EStorageLocation) Deletes a specified directory within a given storage location. Declaration public static bool DeleteDirectory(string relativePath, EStorageLocation location = EStorageLocation.Persistent) Parameters Type Name Description System.String relativePath The relative path of the directory to delete. EStorageLocation location The storage location to use for resolving the directory path. Defaults to Persistent . Returns Type Description System.Boolean true if the directory is deleted successfully; false if an error occurs. Exceptions Type Condition System.IO.IOException Thrown if file or directory deletion fails. System.UnauthorizedAccessException Thrown if the operation lacks necessary permissions. EnsureDirectoryExists(String, EStorageLocation) Ensures that a directory exists at the specified relative path within a given storage location. If the directory does not exist, it is created. Declaration public static void EnsureDirectoryExists(string relativePath, EStorageLocation location = EStorageLocation.Persistent) Parameters Type Name Description System.String relativePath The relative path of the directory to check or create. EStorageLocation location The storage location to use for resolving the directory path. Defaults to Persistent . GetFilesInDirectory(String, EStorageLocation) Retrieves a list of files from a specified directory within a given storage location. Declaration public static List<FileHandle> GetFilesInDirectory(string relativePath, EStorageLocation location = EStorageLocation.Persistent) Parameters Type Name Description System.String relativePath The relative path to the directory from which to retrieve files. EStorageLocation location The storage location to use for resolving the directory path. Defaults to Persistent . Returns Type Description List < FileHandle > A list of FileHandle objects representing the files in the specified directory. If the directory does not exist, an empty list is returned. Examples List<FileHandle> files = FileManager.GetFilesInDirectory(\"Logs\"); foreach (FileHandle file in files) file.Delete(); GetRootPath(EStorageLocation) Retrieves the root path for the specified storage location. Declaration public static string GetRootPath(EStorageLocation location) Parameters Type Name Description EStorageLocation location The storage location for which to retrieve the root path. Returns Type Description System.String The root path of the specified storage location. GetSubdirectories(String, EStorageLocation) Retrieves a list of subdirectories from a specified directory within a given storage location. Declaration public static List<string> GetSubdirectories(string relativePath, EStorageLocation location = EStorageLocation.Persistent) Parameters Type Name Description System.String relativePath The relative path to the directory from which to retrieve subdirectories. EStorageLocation location The storage location to use for resolving the directory path. Defaults to Persistent . Returns Type Description List < System.String > A list of relative paths representing the subdirectories in the specified directory. If the directory does not exist, an empty list is returned. Examples List<string> subdirs = FileManager.GetSubdirectories(\"Projects\"); foreach (string dir in subdirs) Debug.Log(dir); MoveDirectory(String, String, EStorageLocation) Moves a directory from one path to another within a given storage location. Declaration public static bool MoveDirectory(string fromRelativePath, string toRelativePath, EStorageLocation location = EStorageLocation.Persistent) Parameters Type Name Description System.String fromRelativePath The relative path of the source directory. System.String toRelativePath The relative path of the target directory. EStorageLocation location The storage location. Defaults to Persistent . Returns Type Description System.Boolean true if the move succeeds; otherwise throws an exception. Examples FileManager.MoveDirectory(\"TempData\", \"Archived/TempData\"); Exceptions Type Condition System.IO.IOException Thrown if the target directory already exists or if the move fails. TryIOAction(Action, String, Action<Exception, String>) Executes an I/O action and handles any exceptions that occur during its execution. Declaration public static bool TryIOAction(Action action, string errorContext, Action<Exception, string> onError = null) Parameters Type Name Description Action action The I/O action to execute. System.String errorContext A descriptive context for the error, used to provide additional information in the error message. Action < Exception , System.String > onError An optional callback to handle exceptions. The callback receives the exception and the formatted error message. Returns Type Description System.Boolean true if the action executes successfully; false if an exception occurs."
  },
  "api/UniUtils.Data.Formatters.html": {
    "href": "api/UniUtils.Data.Formatters.html",
    "title": "Class Formatters | UniUtils Documentation",
    "keywords": "Class Formatters Provides utility methods for formatting values. Inheritance System.Object Formatters Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public static class Formatters Methods FormatDoubleToUsdString(Double) Formats a double value to a USD currency string. Declaration public static string FormatDoubleToUsdString(double value) Parameters Type Name Description System.Double value The double value to format. Returns Type Description System.String A formatted USD currency string. Examples double price = 49.99; string formatted = Formatters.FormatDoubleToUsdString(price); Debug.Log(formatted); // Output: \"$49.99\" FormatFloatToTimeString(Single) Formats a float value representing time in seconds to a string in the format \"MM:SS:FF\". Declaration public static string FormatFloatToTimeString(float time) Parameters Type Name Description System.Single time The time value in seconds. Returns Type Description System.String A formatted time string in the format \"MM:SS:FF\". Examples float playTime = 125.37f; // 2 minutes, 5 seconds, 370 milliseconds string formatted = Formatters.FormatFloatToTimeString(playTime); Debug.Log(formatted); // Output: \"02:05:37\""
  },
  "api/UniUtils.Data.html": {
    "href": "api/UniUtils.Data.html",
    "title": "Namespace UniUtils.Data | UniUtils Documentation",
    "keywords": "Namespace UniUtils.Data Classes Batcher Provides utility methods for processing items in batches with support for callbacks and error handling. CacheDictionary<TKey, T> Represents a dictionary that caches items and provides methods to manage the cache. Crypter Provides methods for encrypting and decrypting strings using a simple XOR-based algorithm. FadeTransitions Utility class for different transitions of various types. FileHandle Represents a file handle that provides methods for file operations such as reading, writing, and deleting files. FileHandleComparer Provides methods to compare two FileHandle objects for equality based on their full paths. FileManager Provides utility methods for managing files and directories within different storage locations. Formatters Provides utility methods for formatting values. JsonObject<T> Represents a generic JSON object that can be serialized and deserialized using Unity's JsonUtility. The derived class is required to have the [Serializable] attribute. LerpValue<T> A generic class for managing and interpolating a value towards a target value over time. ObservableField<T> Represents an observable field that notifies subscribers when its value changes. ObservableList<T> Represents a list that notifies subscribers when items are added or removed. WaitHelper Enums EStorageLocation Specifies the storage location for files within the application."
  },
  "api/UniUtils.Data.JsonObject-1.html": {
    "href": "api/UniUtils.Data.JsonObject-1.html",
    "title": "Class JsonObject<T> | UniUtils Documentation",
    "keywords": "Class JsonObject<T> Represents a generic JSON object that can be serialized and deserialized using Unity's JsonUtility. The derived class is required to have the [Serializable] attribute. Inheritance System.Object JsonObject<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public abstract class JsonObject<T> Type Parameters Name Description T The type of the object to be deserialized. Methods FromJson(String) Declaration public static T FromJson(string json) Parameters Type Name Description System.String json Returns Type Description T Examples // Define a serializable data model [Serializable] public class PlayerData : JsonObject<PlayerData> { public string playerName; public int score; } // Create an instance and serialize it PlayerData data = new PlayerData { playerName = \"Alex\", score = 150 }; string json = data.ToJson(); Debug.Log(json); // Output: {\"playerName\":\"Alex\",\"score\":150} // You can also deserialize it back: PlayerData deserialized = PlayerData.FromJson(json); Debug.Log(deserialized.playerName); // Output: Alex ToJson(Boolean) Serializes the current object to a JSON string. Declaration public string ToJson(bool prettyPrint = false) Parameters Type Name Description System.Boolean prettyPrint If true, formats the JSON string with better readability. Returns Type Description System.String A JSON string representation of the current object. Examples [Serializable] public class PlayerData : JSONObject<PlayerData> { public string playerName; public int score; } PlayerData data = new PlayerData { playerName = \"Alex\", score = 150 }; string json = data.ToJson(); Debug.Log(json); // Output: {\"playerName\":\"Alex\",\"score\":150} ToString() Overrides the ToString method to return the JSON representation of the object. Declaration public override string ToString() Returns Type Description System.String A JSON string representation of the current object. Overrides System.Object.ToString()"
  },
  "api/UniUtils.Data.LerpValue-1.html": {
    "href": "api/UniUtils.Data.LerpValue-1.html",
    "title": "Class LerpValue<T> | UniUtils Documentation",
    "keywords": "Class LerpValue<T> A generic class for managing and interpolating a value towards a target value over time. Inheritance System.Object LerpValue<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public sealed class LerpValue<T> Type Parameters Name Description T The type of the value to interpolate. Examples using UnityEngine; public class ExampleUsage : MonoBehaviour { private LerpValue<float> lerpAlpha; void Start() { // Start with 0, use Mathf.Lerp, and set speed to 2 lerpAlpha = new LerpValue<float>(0f, Mathf.Lerp, 2f); lerpAlpha.SetTarget(1f); // Targeting full alpha } void Update() { lerpAlpha.Update(Time.deltaTime); float currentAlpha = lerpAlpha.Value; // Use currentAlpha for fading UI, etc. } } Constructors LerpValue(T, Func<T, T, Single, T>, Single) Initializes a new instance of the LerpValue<T> class. Declaration public LerpValue(T initialValue, Func<T, T, float, T> lerpFunction, float speed = 5F) Parameters Type Name Description T initialValue The initial value of the interpolation. Func <T, T, System.Single , T> lerpFunction The interpolation function to use. System.Single speed The speed of interpolation (default is 5f). Exceptions Type Condition System.ArgumentNullException Thrown if lerpFunction is null. Properties LerpSpeed Gets the speed at which the value interpolates towards the target. Declaration public float LerpSpeed { get; } Property Value Type Description System.Single The speed of interpolation. Target Gets the target value. Declaration public T Target { get; } Property Value Type Description T The target value. Value Gets the current interpolated value. Declaration public T Value { get; } Property Value Type Description T The current value. Methods ForceSet(T) Immediately sets the current and target values to a specified value. Declaration public void ForceSet(T newValue) Parameters Type Name Description T newValue The value to set. SetLerpSpeed(Single) Sets the speed at which the value interpolates towards the target. Declaration public void SetLerpSpeed(float newSpeed) Parameters Type Name Description System.Single newSpeed The new interpolation speed. SetTarget(T) Sets a new target value for interpolation. Declaration public void SetTarget(T newTarget) Parameters Type Name Description T newTarget The new target value. Update(Single) Updates the current value by interpolating towards the target value. Declaration public void Update(float deltaTime) Parameters Type Name Description System.Single deltaTime The time elapsed since the last update."
  },
  "api/UniUtils.Data.ObservableField-1.html": {
    "href": "api/UniUtils.Data.ObservableField-1.html",
    "title": "Class ObservableField<T> | UniUtils Documentation",
    "keywords": "Class ObservableField<T> Represents an observable field that notifies subscribers when its value changes. Inheritance System.Object ObservableField<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public class ObservableField<T> Type Parameters Name Description T Examples The type of the value being observed. ObservableField<int> observableInt = new ObservableField<int>(10); observableInt.OnChange += newValue => Debug.Log($\"Value changed to {newValue}\"); observableInt.Value = 20; // Triggers OnChange and outputs: Value changed to 20 observableInt.Value = 20; // No event triggered because value is the same Constructors ObservableField(T) Initializes a new instance of the ObservableField<T> class with an optional initial value. Declaration public ObservableField(T initialValue = null) Parameters Type Name Description T initialValue The initial value of the observable field. Properties Value Gets or sets the value of the observable field. Declaration public T Value { get; set; } Property Value Type Description T Events OnChange Action to be invoked when the value changes. Declaration public event Action<T> OnChange Event Type Type Description Action <T>"
  },
  "api/UniUtils.Data.ObservableList-1.html": {
    "href": "api/UniUtils.Data.ObservableList-1.html",
    "title": "Class ObservableList<T> | UniUtils Documentation",
    "keywords": "Class ObservableList<T> Represents a list that notifies subscribers when items are added or removed. Inheritance System.Object ObservableList<T> Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public class ObservableList<T> : IEnumerable<T> Type Parameters Name Description T The type of elements in the list. Examples ObservableList<string> observableList = new ObservableList<string>(); observableList.OnAdd += item => Debug.Log($\"Added: {item}\"); observableList.OnRemove += item => Debug.Log($\"Removed: {item}\"); observableList.Add(\"Hello\"); // Output: Added: Hello observableList.Add(\"World\"); // Output: Added: World observableList.Remove(\"Hello\"); // Output: Removed: Hello observableList.Clear(); // Output: Removed: World Properties Count Gets the number of elements contained in the list. Declaration public int Count { get; } Property Value Type Description System.Int32 Item[Int32] Gets the element at the specified index. Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index The zero-based index of the element to get. Property Value Type Description T The element at the specified index. Methods Add(T) Adds an item to the list and triggers the OnAdd event. Declaration public void Add(T item) Parameters Type Name Description T item The item to add to the list. Clear() Removes all items from the list and triggers the OnRemove event for each item. Declaration public void Clear() GetEnumerator() Returns an enumerator that iterates through the list. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> An enumerator for the list. Remove(T) Removes the first occurrence of a specific item from the list and triggers the OnRemove event. Declaration public bool Remove(T item) Parameters Type Name Description T item The item to remove from the list. Returns Type Description System.Boolean true if the item is successfully removed; otherwise, false. Events OnAdd Event triggered when an item is added to the list. Declaration public event Action<T> OnAdd Event Type Type Description Action <T> OnRemove Event triggered when an item is removed from the list. Declaration public event Action<T> OnRemove Event Type Type Description Action <T>"
  },
  "api/UniUtils.Data.WaitHelper.html": {
    "href": "api/UniUtils.Data.WaitHelper.html",
    "title": "Class WaitHelper | UniUtils Documentation",
    "keywords": "Class WaitHelper Inheritance System.Object WaitHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Data Assembly : cs.temp.dll.dll Syntax public static class WaitHelper Properties WaitForEndOfFrame Gets a WaitForEndOfFrame instance. Declaration public static WaitForEndOfFrame WaitForEndOfFrame { get; } Property Value Type Description WaitForEndOfFrame Examples // Usage example: IEnumerator ExampleCoroutine() { yield return WaitHelper.WaitForEndOfFrame; } WaitForFixedUpdate Gets a WaitForFixedUpdate instance. Declaration public static WaitForFixedUpdate WaitForFixedUpdate { get; } Property Value Type Description WaitForFixedUpdate Examples // Usage example: IEnumerator ExampleCoroutine() { yield return WaitHelper.WaitForFixedUpdate; } Methods WaitForSeconds(Single) Gets a cached WaitForSeconds instance for the specified duration. Declaration public static WaitForSeconds WaitForSeconds(float seconds) Parameters Type Name Description System.Single seconds The duration in seconds. Returns Type Description WaitForSeconds A WaitForSeconds instance. Examples // Usage example: IEnumerator ExampleCoroutine() { // Wait for 1 second using cached instance yield return WaitHelper.WaitForSeconds(1f); } WaitForSecondsRealtime(Single) Gets a cached WaitForSecondsRealtime instance for the specified duration. Declaration public static WaitForSecondsRealtime WaitForSecondsRealtime(float seconds) Parameters Type Name Description System.Single seconds The duration in seconds. Returns Type Description WaitForSecondsRealtime A WaitForSecondsRealtime instance. Examples // Usage example: IEnumerator ExampleCoroutine() { // Wait for 1 second in real time using cached instance yield return WaitHelper.WaitForSecondsRealtime(1f); }"
  },
  "api/UniUtils.Debugging.ELogTypeMask.html": {
    "href": "api/UniUtils.Debugging.ELogTypeMask.html",
    "title": "Enum ELogTypeMask | UniUtils Documentation",
    "keywords": "Enum ELogTypeMask Represents a bitmask for categorizing log types in debugging. Namespace : UniUtils.Debugging Assembly : cs.temp.dll.dll Syntax public enum ELogTypeMask Fields Name Description All Assert Error Exception Log None Warning"
  },
  "api/UniUtils.Debugging.html": {
    "href": "api/UniUtils.Debugging.html",
    "title": "Namespace UniUtils.Debugging | UniUtils Documentation",
    "keywords": "Namespace UniUtils.Debugging Classes Logger A logger class that persists log entries and saves them to a file. NavMeshPathDrawer Draws the path of a NavMeshAgent using a LineRenderer. Structs LogEntry Represents a log entry. Enums ELogTypeMask Represents a bitmask for categorizing log types in debugging."
  },
  "api/UniUtils.Debugging.LogEntry.html": {
    "href": "api/UniUtils.Debugging.LogEntry.html",
    "title": "Struct LogEntry | UniUtils Documentation",
    "keywords": "Struct LogEntry Represents a log entry. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : UniUtils.Debugging Assembly : cs.temp.dll.dll Syntax public struct LogEntry Constructors LogEntry(String, DateTime, String, String) Declaration public LogEntry(string logType, DateTime time, string log, string stack) Parameters Type Name Description System.String logType DateTime time System.String log System.String stack Fields dateTime Declaration public DateTime dateTime Field Value Type Description DateTime logString Declaration public string logString Field Value Type Description System.String stackTrace Declaration public string stackTrace Field Value Type Description System.String type Declaration public string type Field Value Type Description System.String"
  },
  "api/UniUtils.Debugging.Logger.html": {
    "href": "api/UniUtils.Debugging.Logger.html",
    "title": "Class Logger | UniUtils Documentation",
    "keywords": "Class Logger A logger class that persists log entries and saves them to a file. Inheritance System.Object Logger Namespace : UniUtils.Debugging Assembly : cs.temp.dll.dll Syntax public class Logger : PersistentSingleton<Logger> Examples Access the logger instance (singleton) and retrieve the current log as a string. string currentLog = Logger.Instance.Log; You can also customize ignored words and toggle stack trace appending in the inspector. Properties LogString Gets the complete log as a string. Declaration public string LogString { get; } Property Value Type Description System.String Methods Awake() Initializes the logger. Declaration protected override void Awake() Events OnNewLogEntry Declaration public event Action<LogEntry> OnNewLogEntry Event Type Type Description Action < LogEntry >"
  },
  "api/UniUtils.Debugging.NavMeshPathDrawer.html": {
    "href": "api/UniUtils.Debugging.NavMeshPathDrawer.html",
    "title": "Class NavMeshPathDrawer | UniUtils Documentation",
    "keywords": "Class NavMeshPathDrawer Draws the path of a NavMeshAgent using a LineRenderer. Inheritance System.Object NavMeshPathDrawer Namespace : UniUtils.Debugging Assembly : cs.temp.dll.dll Syntax public class NavMeshPathDrawer : MonoBehaviour Examples Attach this component to a GameObject with a NavMeshAgent to visualize the agent's path. Example usage: 1. Add NavMeshAgent component to your GameObject. 2. Add this NavMeshPathDrawer component. 3. Configure 'showPath', 'pathColor', and 'lineWidth' in the Inspector. The path will be drawn automatically every frame."
  },
  "api/UniUtils.Editor.ColliderBoundsDrawer.html": {
    "href": "api/UniUtils.Editor.ColliderBoundsDrawer.html",
    "title": "Class ColliderBoundsDrawer | UniUtils Documentation",
    "keywords": "Class ColliderBoundsDrawer A MonoBehaviour that visualizes the bounds of a Collider in the Unity Editor. Inheritance System.Object ColliderBoundsDrawer Namespace : UniUtils.Editor Assembly : cs.temp.dll.dll Syntax public class ColliderBoundsDrawer : MonoBehaviour"
  },
  "api/UniUtils.Editor.html": {
    "href": "api/UniUtils.Editor.html",
    "title": "Namespace UniUtils.Editor | UniUtils Documentation",
    "keywords": "Namespace UniUtils.Editor Classes ColliderBoundsDrawer A MonoBehaviour that visualizes the bounds of a Collider in the Unity Editor."
  },
  "api/UniUtils.EventSystem.EventChannel-1.html": {
    "href": "api/UniUtils.EventSystem.EventChannel-1.html",
    "title": "Class EventChannel<TChannel> | UniUtils Documentation",
    "keywords": "Class EventChannel<TChannel> Abstract class representing an event channel that can subscribe, unsubscribe, and publish events. Inheritance System.Object EventChannel<TChannel> Implements IEventChannel Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.EventSystem Assembly : cs.temp.dll.dll Syntax public abstract class EventChannel<TChannel> : IEventChannel where TChannel : EventChannel<TChannel> Type Parameters Name Description TChannel The type of the event channel. Examples Define a custom event channel [Preserve] // Add Preserve to prevent the compiler from stripping the class. public class PlayerEventChannel : EventChannel<PlayerEventChannel> { } Fields handlers Dictionary to store event handlers by event type and handler ID. Declaration protected readonly Dictionary<Type, Dictionary<int, Action<IEvent<TChannel>>>> handlers Field Value Type Description Dictionary < Type , Dictionary < System.Int32 , Action < IEvent <TChannel>>>> handlersToRemove Set of handler IDs to be removed after publishing. Declaration protected readonly HashSet<int> handlersToRemove Field Value Type Description HashSet < System.Int32 > isPublishing Indicates whether an event is currently being published. Declaration protected bool isPublishing Field Value Type Description System.Boolean needsClearAfterPublishing Indicates whether the handlers dictionary needs to be cleared after publishing. Declaration protected bool needsClearAfterPublishing Field Value Type Description System.Boolean nextHandlerId The next handler ID to be assigned. Declaration protected int nextHandlerId Field Value Type Description System.Int32 Methods HandleHandlersToRemove(Dictionary<Int32, Action<IEvent<TChannel>>>) Handles the removal of handlers that were marked for removal during publishing. Declaration protected virtual void HandleHandlersToRemove(Dictionary<int, Action<IEvent<TChannel>>> actions) Parameters Type Name Description Dictionary < System.Int32 , Action < IEvent <TChannel>>> actions The dictionary of actions to remove handlers from. Publish<TEvent>(IEvent<TChannel>) Publishes an event by invoking all handlers for the event type. Declaration public virtual void Publish<TEvent>(IEvent<TChannel> event) where TEvent : IEvent<TChannel> Parameters Type Name Description IEvent <TChannel> event The event to publish. Type Parameters Name Description TEvent The type of the event. Subscribe<TEvent>(Action<TEvent>) Subscribes a handler to an event type. Declaration public virtual int Subscribe<TEvent>(Action<TEvent> handler) where TEvent : IEvent<TChannel> Parameters Type Name Description Action <TEvent> handler The handler to be invoked when the event is published. Returns Type Description System.Int32 The ID of the subscribed handler. Type Parameters Name Description TEvent The type of the event. Unsubscribe<TEvent>(Int32) Unsubscribes a handler from an event type. Declaration public virtual void Unsubscribe<TEvent>(int handlerId) where TEvent : IEvent<TChannel> Parameters Type Name Description System.Int32 handlerId The ID of the handler to be unsubscribed. Type Parameters Name Description TEvent The type of the event. UnsubscribeAll() Unsubscribes all event handlers. Declaration public virtual void UnsubscribeAll() Implements IEventChannel"
  },
  "api/UniUtils.EventSystem.EventManager.html": {
    "href": "api/UniUtils.EventSystem.EventManager.html",
    "title": "Class EventManager | UniUtils Documentation",
    "keywords": "Class EventManager Manages event channels and provides methods to subscribe and publish events. Inheritance System.Object EventManager Namespace : UniUtils.EventSystem Assembly : cs.temp.dll.dll Syntax public class EventManager : PersistentSingleton<EventManager> Examples // Publisher example public class Player : MonoBehaviour { public void Jump() { PlayerJumpEvent jumpEvent = new PlayerJumpEvent { jumpStrength = 5.0f }; EventManager.Publish<PlayerEventChannel, PlayerJumpEvent>(jumpEvent); } } // Subscriber example public class SoundManager : MonoBehaviour { private int handle; private void OnEnable() { handle = EventManager.Subscribe<PlayerEventChannel, PlayerJumpEvent>(OnPlayerJump); } private void OnDisable() { EventManager.Unsubscribe<PlayerEventChannel, PlayerJumpEvent>(handle); } private void OnPlayerJump(PlayerJumpEvent jumpEvent) { // React to jump event, e.g. play sound } } Fields EventChannels Dictionary to store event channels by their type. Declaration protected static readonly Dictionary<Type, IEventChannel> EventChannels Field Value Type Description Dictionary < Type , IEventChannel > Methods Awake() Called when the script instance is being loaded. Declaration protected override void Awake() GetEventChannel<T>() Gets the event channel of the specified type. Declaration protected static T GetEventChannel<T>() where T : EventChannel<T> Returns Type Description T The event channel of the specified type. Type Parameters Name Description T The type of the event channel. Publish<TChannel, TEvent>(TEvent) Publishes an event by invoking all handlers for the event type. Declaration public static void Publish<TChannel, TEvent>(TEvent event) where TChannel : EventChannel<TChannel> where TEvent : IEvent<TChannel> Parameters Type Name Description TEvent event The event to publish. Type Parameters Name Description TChannel The type of the event channel. TEvent The type of the event. RegisterEventChannels() Registers all event channels by finding and instantiating classes that extend EventChannel. Declaration protected static void RegisterEventChannels() Subscribe<TChannel, TEvent>(Action<TEvent>) Subscribes to an event by adding a handler to the event channel. Declaration public static int Subscribe<TChannel, TEvent>(Action<TEvent> handler) where TChannel : EventChannel<TChannel> where TEvent : IEvent<TChannel> Parameters Type Name Description Action <TEvent> handler The handler to add for the event. Returns Type Description System.Int32 The ID of the subscribed handler. Type Parameters Name Description TChannel The type of the event channel. TEvent The type of the event. Unsubscribe<TChannel, TEvent>(Int32) Unsubscribes from an event by removing a handler from the event channel. Declaration public static void Unsubscribe<TChannel, TEvent>(int handlerId) where TChannel : EventChannel<TChannel> where TEvent : IEvent<TChannel> Parameters Type Name Description System.Int32 handlerId The ID of the handler to remove for the event. Type Parameters Name Description TChannel The type of the event channel. TEvent The type of the event. UnsubscribeAll<TChannel>() Unsubscribes all events by clearing the handlers dictionary in the specified event channel. Declaration protected static void UnsubscribeAll<TChannel>() where TChannel : EventChannel<TChannel> Type Parameters Name Description TChannel"
  },
  "api/UniUtils.EventSystem.html": {
    "href": "api/UniUtils.EventSystem.html",
    "title": "Namespace UniUtils.EventSystem | UniUtils Documentation",
    "keywords": "Namespace UniUtils.EventSystem Classes EventChannel<TChannel> Abstract class representing an event channel that can subscribe, unsubscribe, and publish events. EventManager Manages event channels and provides methods to subscribe and publish events. Interfaces IEvent<TChannel> Interface for events with a specific event channel. IEventChannel Interface representing an event channel."
  },
  "api/UniUtils.EventSystem.IEvent-1.html": {
    "href": "api/UniUtils.EventSystem.IEvent-1.html",
    "title": "Interface IEvent<TChannel> | UniUtils Documentation",
    "keywords": "Interface IEvent<TChannel> Interface for events with a specific event channel. Namespace : UniUtils.EventSystem Assembly : cs.temp.dll.dll Syntax public interface IEvent<TChannel> where TChannel : EventChannel<TChannel> Type Parameters Name Description TChannel The type of the event channel. Examples Define an event 'PlayerJumpEvent' on the 'PlayerEventChannel' channel public class PlayerJumpEvent : IEvent<PlayerEventChannel> { public float jumpStrength; }"
  },
  "api/UniUtils.EventSystem.IEventChannel.html": {
    "href": "api/UniUtils.EventSystem.IEventChannel.html",
    "title": "Interface IEventChannel | UniUtils Documentation",
    "keywords": "Interface IEventChannel Interface representing an event channel. Namespace : UniUtils.EventSystem Assembly : cs.temp.dll.dll Syntax public interface IEventChannel Methods UnsubscribeAll() Declaration void UnsubscribeAll()"
  },
  "api/UniUtils.Extensions.AudioSourceExtension.html": {
    "href": "api/UniUtils.Extensions.AudioSourceExtension.html",
    "title": "Class AudioSourceExtension | UniUtils Documentation",
    "keywords": "Class AudioSourceExtension Provides extension methods for Audio sources. Inheritance System.Object AudioSourceExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class AudioSourceExtension Methods FadeVolume(AudioSource, Single, Single, Nullable<Single>, Action) Fades the volume of the given AudioSource from a start volume to a target volume over a specified duration. Declaration public static IEnumerator FadeVolume(this AudioSource audioSource, float duration, float targetVolume, float? startVolume = null, Action onFinished = null) Parameters Type Name Description AudioSource audioSource The AudioSource to fade. System.Single duration The duration over which to fade the volume. System.Single targetVolume The target volume to reach at the end of the fade. System.Nullable < System.Single > startVolume The starting volume. Defaults to 0. Action onFinished An optional callback to invoke when the fade is complete. Returns Type Description IEnumerator An IEnumerator that can be used to run the fade operation in a coroutine. Examples // Usage example: IEnumerator FadeExample(AudioSource audioSource) { // Fade volume to 0 over 2 seconds yield return audioSource.FadeVolume(2f, 0f); // Fade back to full volume over 1.5 seconds yield return audioSource.FadeVolume(1.5f, 1f); } // Usage example: StartCoroutine(audioSource.FadeVolume(1.5f, 1f)); PlayAndWaitUntilFinished(AudioSource, AudioClip, Single, Action) Plays an AudioClip on the given AudioSource and waits until it finishes playing, with an optional offset to end playback early and a callback when finished. Declaration public static IEnumerator PlayAndWaitUntilFinished(this AudioSource audioSource, AudioClip clip, float endTimeOffset = 0F, Action onFinished = null) Parameters Type Name Description AudioSource audioSource The AudioSource to play the clip on. AudioClip clip The AudioClip to play. System.Single endTimeOffset The time (in seconds) to offset from the end of the clip. Defaults to 0. If the offset is greater than or equal to the clip length, the method exits early. Action onFinished An optional callback to invoke when the clip finishes playing. Returns Type Description IEnumerator An IEnumerator that can be used to run the operation in a coroutine. Examples // Usage example: IEnumerator PlayClip(AudioSource audioSource, AudioClip clip) { yield return audioSource.PlayAndWaitUntilFinished(clip, 0.2f, () => Debug.Log(\"Clip finished!\")); } // StartCoroutine(PlayClip(audioSource, clip)); PlayOneShotWithVariance(AudioSource, AudioClip, Single, Single, Single) Plays an AudioClip with random pitch and volume variations for added audio diversity. Declaration public static void PlayOneShotWithVariance(this AudioSource audioSource, AudioClip clip, float audioVolume = 1F, float maxPitchVariation = 0.1F, float maxVolumeVariation = 0.1F) Parameters Type Name Description AudioSource audioSource The AudioSource to play the clip on. AudioClip clip The AudioClip to play. System.Single audioVolume The base volume at which to play the clip. Defaults to 1. System.Single maxPitchVariation The maximum variation in pitch. Defaults to 0.1. System.Single maxVolumeVariation The maximum variation in volume. Defaults to 0.1. Examples // Usage example: void PlayClipWithVariance(AudioSource audioSource, AudioClip clip) { audioSource.PlayOneShotWithVariance(clip, 1f, 0.2f, 0.15f); } TransitionToClip(AudioSource, AudioClip, Nullable<Single>, Single, Action) Transitions the AudioSource to a new AudioClip by fading out the current clip (if playing), stopping it, and then fading in the new clip. Declaration public static IEnumerator TransitionToClip(this AudioSource audioSource, AudioClip clip, float? targetVolume = null, float transitionDuration = 1F, Action onFinished = null) Parameters Type Name Description AudioSource audioSource The AudioSource to transition. AudioClip clip The new AudioClip to play. System.Nullable < System.Single > targetVolume The target volume to fade to when playing the new clip. Defaults to the current volume of the AudioSource. System.Single transitionDuration The total duration of the transition (fade out + fade in). Defaults to 1 second. Action onFinished An optional callback to invoke when the transition is finished. Returns Type Description IEnumerator An IEnumerator that can be used to run the transition in a coroutine. Examples // Usage example: IEnumerator TransitionExample(AudioSource audioSource, AudioClip newClip) { yield return audioSource.TransitionToClip(newClip, 0.8f, 2f); } // StartCoroutine(TransitionExample(audioSource, newClip)); WaitUntilFinished(AudioSource, Single, Action) Waits until the current clip on the AudioSource finishes playing, with an optional offset to end early and a callback when finished. Declaration public static IEnumerator WaitUntilFinished(this AudioSource audioSource, float endTimeOffset = 0F, Action onFinished = null) Parameters Type Name Description AudioSource audioSource The AudioSource playing the clip. System.Single endTimeOffset The time (in seconds) to offset from the end of the clip. Defaults to 0. If the offset is greater than or equal to the clip length, the method exits early. Action onFinished An optional callback to invoke when the clip finishes playing. Returns Type Description IEnumerator An IEnumerator to be used in a coroutine. Examples yield return audioSource.WaitUntilFinished(0.1f, () => Debug.Log(\"Done\"));"
  },
  "api/UniUtils.Extensions.BoxColliderExtension.html": {
    "href": "api/UniUtils.Extensions.BoxColliderExtension.html",
    "title": "Class BoxColliderExtension | UniUtils Documentation",
    "keywords": "Class BoxColliderExtension Provides extension methods for the BoxCollider class. Inheritance System.Object BoxColliderExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class BoxColliderExtension Methods RandomPoint(BoxCollider, Boolean) Returns a random point within the bounds of the BoxCollider. Declaration public static Vector3 RandomPoint(this BoxCollider collider, bool includeY = false) Parameters Type Name Description BoxCollider collider System.Boolean includeY If true, includes the Y coordinate in the random point; otherwise, uses the Y position of the collider's transform. Returns Type Description Vector3 A random point within the bounds of the BoxCollider. Examples // Usage example: void Example(BoxCollider boxCollider) { // Get a random point inside the collider ignoring Y (using collider's Y position) Vector3 point = boxCollider.RandomPoint(); // Get a random point inside the collider including Y coordinate Vector3 pointWithY = boxCollider.RandomPoint(true); Debug.Log(\"Random point (no Y): \" + point); Debug.Log(\"Random point (with Y): \" + pointWithY); }"
  },
  "api/UniUtils.Extensions.CameraExtension.html": {
    "href": "api/UniUtils.Extensions.CameraExtension.html",
    "title": "Class CameraExtension | UniUtils Documentation",
    "keywords": "Class CameraExtension Provides extension methods for the Camera. Inheritance System.Object CameraExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class CameraExtension Methods Capture(Camera, Action<Byte[]>, LayerMask) Captures the current camera view and invokes a callback with the image data as a byte array. Declaration public static void Capture(this Camera camera, Action<byte[]> callback, LayerMask excludedLayers = null) Parameters Type Name Description Camera camera The Camera instance to capture the view from. Action < System.Byte []> callback The callback to invoke with the captured image data. LayerMask excludedLayers The layers to exclude from the camera capture. Defaults to none. Examples // Usage example: void Start() { Camera mainCam = Camera.main; mainCam.Capture(OnCaptured); } void OnCaptured(byte[] imageData) { Debug.Log(\"Captured image byte size: \" + imageData.Length); // You can now save the image or use it however you want } Raycast(Camera, out RaycastHit, LayerMask, Nullable<Vector3>, Single, QueryTriggerInteraction, Boolean) Performs a raycast from the camera's screen point and returns whether a hit occurred. Declaration public static bool Raycast(this Camera camera, out RaycastHit hit, LayerMask includedLayers, Vector3? position = null, float maxDistance = 3.40282347E+38F, QueryTriggerInteraction queryTriggerInteraction = null, bool drawRay = false) Parameters Type Name Description Camera camera The Camera instance to perform the raycast from. RaycastHit hit The RaycastHit object containing information about the hit. LayerMask includedLayers The layers to include in the raycast. System.Nullable < Vector3 > position The screen position to cast the ray from. Defaults to the center of the screen. System.Single maxDistance The maximum distance for the raycast. Defaults to infinity. QueryTriggerInteraction queryTriggerInteraction Specifies whether to include trigger colliders in the raycast. System.Boolean drawRay Indicates whether to draw the ray in the scene view for debugging purposes. Returns Type Description System.Boolean true if the raycast hit an object; otherwise, false . Examples Example usage: RaycastHit hit; bool didHit = Camera.main.Raycast( includedLayers: LayerMask.GetMask(\"Default\"), hit: out hit, drawRay: true ); if (didHit) { Debug.Log($\"Hit: {hit.collider.name}\"); }"
  },
  "api/UniUtils.Extensions.ColorExtension.html": {
    "href": "api/UniUtils.Extensions.ColorExtension.html",
    "title": "Class ColorExtension | UniUtils Documentation",
    "keywords": "Class ColorExtension Provides extension methods for the Color class. Inheritance System.Object ColorExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class ColorExtension Methods AdjustSaturation(Color, Single) Adjusts the saturation and brightness of the given color by the specified intensity. Declaration public static Color AdjustSaturation(this Color color, float intensity) Parameters Type Name Description Color color The original color to adjust. System.Single intensity The intensity by which to adjust the saturation and value. Positive values increase, negative values decrease. Returns Type Description Color A new color with adjusted saturation and value. Examples Color original = Color.red; Color adjusted = original.AdjustSaturation(0.2f); Debug.Log(\"Adjusted color: \" + adjusted); FromHex(String) Converts a hexadecimal string to a Color. Declaration public static Color FromHex(this string hex) Parameters Type Name Description System.String hex The hexadecimal string to convert. Returns Type Description Color The Color represented by the hexadecimal string. Examples string hex = \"#FF00FF\"; try { Color color = hex.FromHex(); Debug.Log(\"Color: \" + color); } catch (Exception e) { Debug.LogError(e.Message); } Exceptions Type Condition System.ArgumentException System.ArgumentException: Thrown when the hex string is in an invalid format. ToHex(Color) Converts the color to a hexadecimal string. Declaration public static string ToHex(this Color color) Parameters Type Name Description Color color The color to convert. Returns Type Description System.String A hexadecimal string representation of the color. Examples Color color = Color.green; string hex = color.ToHex(); Debug.Log(\"Hex: \" + hex); // Output: #00FF00 WithAlpha(Color, Single) Creates a new color with the same RGB values but a modified alpha value. Declaration public static Color WithAlpha(this Color color, float alpha) Parameters Type Name Description Color color The original color. System.Single alpha The new alpha value. Returns Type Description Color A new color with the specified alpha value. Examples Color original = Color.blue; Color withAlpha = original.WithAlpha(0.5f); Debug.Log(\"Color with new alpha: \" + withAlpha);"
  },
  "api/UniUtils.Extensions.EnumExtension.html": {
    "href": "api/UniUtils.Extensions.EnumExtension.html",
    "title": "Class EnumExtension | UniUtils Documentation",
    "keywords": "Class EnumExtension Provides extensions for enums. Inheritance System.Object EnumExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class EnumExtension Methods RandomValue<T>() Returns a random value from the specified enum type. Declaration public static T RandomValue<T>() where T : Enum Returns Type Description T A random value from the enum. Type Parameters Name Description T The enum type. Examples // Example enum enum Colors { Red, Green, Blue } // Get a random color Colors randomColor = EnumExtension.RandomValue<Colors>(); Debug.Log(randomColor);"
  },
  "api/UniUtils.Extensions.GameObjectExtension.html": {
    "href": "api/UniUtils.Extensions.GameObjectExtension.html",
    "title": "Class GameObjectExtension | UniUtils Documentation",
    "keywords": "Class GameObjectExtension Provides extension methods for the GameObject class. Inheritance System.Object GameObjectExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtension Methods GetOrAddComponent<T>(GameObject) Retrieves a component of the specified type from the GameObject. If the component does not exist, it adds a new one to the GameObject. Declaration public static T GetOrAddComponent<T>(this GameObject obj) where T : Component Parameters Type Name Description GameObject obj The GameObject to retrieve or add the component to. Returns Type Description T The existing or newly added component of the specified type. Type Parameters Name Description T The type of the component to retrieve or add. Examples // Usage example: GameObject obj = new GameObject(\"MyObject\"); Rigidbody rb = obj.GetOrAddComponent<Rigidbody>(); SetLayersRecursively(GameObject, LayerMask, Boolean) Recursively sets the of this GameObject and all its children, returning a dictionary of each GameObject to its original layer mask. Declaration public static Dictionary<GameObject, LayerMask> SetLayersRecursively(this GameObject obj, LayerMask layerMask, bool includeInactive = true) Parameters Type Name Description GameObject obj The root GameObject whose layer (and its descendants) will be set. LayerMask layerMask The target layer mask. Internally, is an int index, so this method uses layerMask.value as the new layer index. System.Boolean includeInactive If true , will include inactive children; otherwise only active ones. Returns Type Description Dictionary < GameObject , LayerMask > A mapping each affected GameObject to its original (as a )."
  },
  "api/UniUtils.Extensions.html": {
    "href": "api/UniUtils.Extensions.html",
    "title": "Namespace UniUtils.Extensions | UniUtils Documentation",
    "keywords": "Namespace UniUtils.Extensions Classes AudioSourceExtension Provides extension methods for Audio sources. BoxColliderExtension Provides extension methods for the BoxCollider class. CameraExtension Provides extension methods for the Camera. ColorExtension Provides extension methods for the Color class. EnumExtension Provides extensions for enums. GameObjectExtension Provides extension methods for the GameObject class. LayerMaskExtension Provides extension methods for the LayerMask class. ListExtension Provides extension methods for lists of floats and generic lists. ObjectExtension Provides extension methods for objects to enhance logging functionality. QuaternionExtension Provides extension methods for the Quaternion class. RayExtension Provides extensions for Rays. RectExtension RectTransformExtension Provides extension methods for RectTransforms. StringExtension Provides extension methods for Strings. TransformExtension Provides extension methods for the Transform class. Vector3Extension Provides extension methods for the Vector3 class."
  },
  "api/UniUtils.Extensions.LayerMaskExtension.html": {
    "href": "api/UniUtils.Extensions.LayerMaskExtension.html",
    "title": "Class LayerMaskExtension | UniUtils Documentation",
    "keywords": "Class LayerMaskExtension Provides extension methods for the LayerMask class. Inheritance System.Object LayerMaskExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class LayerMaskExtension Methods CreateLayerMaskFromIndices(Int32[]) Creates a LayerMask from an array of layer indices. Declaration public static LayerMask CreateLayerMaskFromIndices(params int[] layerIndices) Parameters Type Name Description System.Int32 [] layerIndices An array of layer indices. Returns Type Description LayerMask A LayerMask representing the specified layers. Examples // Create a LayerMask for layers 0, 2, and 5 LayerMask mask = LayerMaskExtension.CreateLayerMaskFromIndices(0, 2, 5); Exceptions Type Condition System.ArgumentException Thrown when a layer index is out of the valid range (0-31). CreateLayerMaskFromNames(String[]) Creates a LayerMask from an array of layer names. Declaration public static LayerMask CreateLayerMaskFromNames(params string[] layerNames) Parameters Type Name Description System.String [] layerNames An array of layer names to convert into a LayerMask. Returns Type Description LayerMask A LayerMask representing the specified layers. Examples // Create a LayerMask from layer names LayerMask mask = LayerMaskExtension.NamesToLayer(\"Default\", \"UI\", \"Player\"); GetSingleLayerIndex(LayerMask) Retrieves the index of a single layer from the LayerMask. Declaration public static int GetSingleLayerIndex(this LayerMask mask) Parameters Type Name Description LayerMask mask The LayerMask to extract the layer index from. Returns Type Description System.Int32 The index of the single layer in the LayerMask. Returns 0 and logs an error if the LayerMask contains no layers or multiple layers. Examples LayerMask mask = LayerMaskExtension.CreateLayerMaskFromIndices(8); int index = mask.GetSingleLayerIndex(); // index will be 8"
  },
  "api/UniUtils.Extensions.ListExtension.html": {
    "href": "api/UniUtils.Extensions.ListExtension.html",
    "title": "Class ListExtension | UniUtils Documentation",
    "keywords": "Class ListExtension Provides extension methods for lists of floats and generic lists. Inheritance System.Object ListExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class ListExtension Methods Center(List<Vector3>) Calculates the center point of a list of Vector3s. Declaration public static Vector3 Center(this List<Vector3> list) Parameters Type Name Description List < Vector3 > list The list of Vector3s to calculate the center point of. Returns Type Description Vector3 The center point of the list of Vector3s. Examples List<Vector3> positions = new() { new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1) }; Vector3 centerPoint = positions.Center(); // centerPoint is approximately (0.33, 0.33, 0.33) Chunk<T>(List<T>, Int32) Splits a list into smaller chunks of a specified size. Declaration public static List<List<T>> Chunk<T>(this List<T> list, int chunkSize) Parameters Type Name Description List <T> list The source list to split into chunks. System.Int32 chunkSize The size of each chunk. Returns Type Description List < List <T>> A list of smaller lists, each containing up to chunkSize items. Type Parameters Name Description T The type of items in the list. Clone<T>(List<T>) Creates a shallow copy of the list. Declaration public static List<T> Clone<T>(this List<T> list) Parameters Type Name Description List <T> list The list to clone. Returns Type Description List <T> A new list containing the same elements as the original list. Type Parameters Name Description T The type of elements in the list. Examples List<float> original = new() { 1.0f, 2.0f, 3.0f }; List<float> copy = original.Clone(); // copy contains the same elements as original Flatten<T>(List<List<T>>) Flattens a list of lists into a single list by concatenating all inner lists. Declaration public static List<T> Flatten<T>(this List<List<T>> listOfLists) Parameters Type Name Description List < List <T>> listOfLists The list of lists to flatten. Returns Type Description List <T> A single list containing all elements from the inner lists. Type Parameters Name Description T The type of elements in the lists. Examples List<List<int>> nested = new() { new List<int> { 1, 2 }, new List<int> { 3, 4 }, new List<int> { 5 } }; List<int> flat = nested.Flatten(); // flat is { 1, 2, 3, 4, 5 } Furthest(List<Transform>, Transform) Finds the furthest transform in the list from the specified transform. Declaration public static Transform Furthest(this List<Transform> transformList, Transform compareTransform) Parameters Type Name Description List < Transform > transformList The list of transforms to search. Transform compareTransform The transform to compare against. Returns Type Description Transform The furthest transform from the specified transform. Examples List<Transform> enemies = new List<Transform>(); Transform player = someGameObject.transform; Transform furthestEnemy = enemies.Furthest(player); // furthestEnemy is the furthest enemy transform from the player Lerp(List<Single>, Single) Linearly interpolates between elements in a list of floats based on a parameter t. Declaration public static float Lerp(this List<float> list, float t) Parameters Type Name Description List < System.Single > list The list of floats to interpolate. System.Single t The interpolation parameter, typically between 0 and 1. Returns Type Description System.Single The interpolated float value. Examples List<float> points = new() { 0f, 10f, 20f }; float value = points.Lerp(0.25f); // value is interpolated between 0 and 10, roughly 2.5 Exceptions Type Condition System.ArgumentException System.ArgumentException: Thrown when the list is empty. Nearest(List<Transform>, Transform) Finds the nearest transform in the list to the specified transform. Declaration public static Transform Nearest(this List<Transform> transformList, Transform compareTransform) Parameters Type Name Description List < Transform > transformList The list of transforms to search. Transform compareTransform The transform to compare against. Returns Type Description Transform The nearest transform to the specified transform. Examples List<Transform> enemies = new List<Transform>(); Transform player = someGameObject.transform; Transform nearestEnemy = enemies.Nearest(player); // nearestEnemy is the closest enemy transform to the player Next<T>(List<T>, T) Returns the next element in the list after the specified item. If the item is not found, returns the first element if the list is not empty, otherwise returns the default value for the type. Declaration public static T Next<T>(this List<T> list, T item) Parameters Type Name Description List <T> list The list to search. T item The item to find the next element of. Returns Type Description T The next element in the list after the specified item, or the first element if the item is not found and the list is not empty, otherwise the default value for the type. Type Parameters Name Description T The type of elements in the list. Examples List<string> colors = new() { \"Red\", \"Green\", \"Blue\" }; string nextColor = colors.Next(\"Green\"); // nextColor is \"Blue\" string nextOfUnknown = colors.Next(\"Yellow\"); // nextOfUnknown is \"Red\" (first element) because \"Yellow\" not found ProcessInBatches<T>(List<T>, Action<T>, Int32, Single, Action<T>, Action<T, Boolean>, Action<IReadOnlyList<T>>, Action<IReadOnlyList<T>>, Action<IReadOnlyList<T>>, Action<T, Exception>) Executes a batch operation on a list of items, processing them in groups with optional delays and callbacks. Declaration public static IEnumerator ProcessInBatches<T>(this List<T> itemsList, Action<T> actionOnItem, int itemsPerBatch = 5, float batchDelay = 0.1F, Action<T> onItemProcessStart = null, Action<T, bool> onItemProcessFinished = null, Action<IReadOnlyList<T>> onBatchStart = null, Action<IReadOnlyList<T>> onBatchFinished = null, Action<IReadOnlyList<T>> onFinished = null, Action<T, Exception> onError = null) Parameters Type Name Description List <T> itemsList The list of items to process in batches. Action <T> actionOnItem The action to execute on each item in the batch. System.Int32 itemsPerBatch The number of items to process in each batch. Default is 5. System.Single batchDelay The delay (in seconds) between processing each batch. Default is 0.1f. Action <T> onItemProcessStart Optional callback invoked before processing each item; receives the item as T . Action <T, System.Boolean > onItemProcessFinished Optional callback invoked after processing each item; receives the item as T and a bool indicating success. Action < IReadOnlyList <T>> onBatchStart Optional callback invoked at the start of each batch; receives the current batch as a IReadOnlyList<T> . Action < IReadOnlyList <T>> onBatchFinished Optional callback invoked at the end of each batch; receives the processed batch as a IReadOnlyList<T> . Action < IReadOnlyList <T>> onFinished Optional callback invoked after all batches are processed; receives the entire list as a IReadOnlyList<T> . Action <T, Exception > onError Optional callback invoked when an error occurs during item processing; receives the item that failed ( T ) and the thrown Exception . Returns Type Description IEnumerator An enumerator that can be used to execute the batch operation. Type Parameters Name Description T The type of items in the list. Examples List<int> numbers = new() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; IEnumerator batch = numbers.ProcessInBatches( item => Debug.Log($\"Processing: {item}\"), itemsPerBatch: 3, batchDelay: 0.5f, onBatchStart: batchItems => Debug.Log($\"Batch started: {string.Join(\", \", batchItems)}\"), onBatchFinished: batchItems => Debug.Log($\"Batch finished: {string.Join(\", \", batchItems)}\"), onFinished: allItems => Debug.Log(\"All batches complete!\") ); // Use StartCoroutine(batch) in a MonoBehaviour to execute. Random<T>(List<T>) Returns a random element from the list. Declaration public static T Random<T>(this List<T> list) Parameters Type Name Description List <T> list The list to select a random element from. Returns Type Description T A random element from the list. Type Parameters Name Description T The type of elements in the list. Examples List<int> values = new() { 10, 20, 30 }; int randomValue = values.Random(); // randomValue is one of 10, 20, or 30 Exceptions Type Condition System.ArgumentException System.ArgumentException: Thrown when the list is empty. Random<T>(List<T>, Int32) Returns a list of unique random elements from the list. Declaration public static List<T> Random<T>(this List<T> list, int count) Parameters Type Name Description List <T> list The list to select random elements from. System.Int32 count The number of unique random elements to return. Returns Type Description List <T> A list containing unique random elements from the original list. Type Parameters Name Description T The type of elements in the list. Examples List<int> numbers = new() { 1, 2, 3, 4, 5 }; List<int> randomSubset = numbers.Random(3); // randomSubset contains 3 unique elements randomly selected from numbers Exceptions Type Condition System.ArgumentException Thrown if count is greater than the list count or if count is negative. Replace<T>(List<T>, T, T) Replaces the first occurrence of a specified item in the list with a new item. Declaration public static List<T> Replace<T>(this List<T> list, T oldItem, T newItem) Parameters Type Name Description List <T> list The list in which the replacement will occur. T oldItem The item to be replaced. T newItem The item to replace the old item with. Returns Type Description List <T> The original list with the specified item replaced. Type Parameters Name Description T The type of elements in the list. Examples List<string> fruits = new() { \"Apple\", \"Banana\", \"Cherry\" }; fruits.Replace(\"Banana\", \"Orange\"); // fruits is now { \"Apple\", \"Orange\", \"Cherry\" } Shuffle<T>(List<T>) Shuffles the elements of a list in place using the Fisher-Yates algorithm. Declaration public static List<T> Shuffle<T>(this List<T> list) Parameters Type Name Description List <T> list The list to shuffle. Returns Type Description List <T> Type Parameters Name Description T The type of elements in the list. Examples List<string> names = new() { \"Alice\", \"Bob\", \"Charlie\" }; names.Shuffle(); // names order is now randomized, e.g., \"Charlie\", \"Alice\", \"Bob\" SortInPlace<T>(List<T>, Comparison<T>) Sorts the elements of the list in place using the specified comparison. Declaration public static List<T> SortInPlace<T>(this List<T> list, Comparison<T> comparison) Parameters Type Name Description List <T> list The list to sort. Comparison <T> comparison The comparison to use for sorting the elements. Returns Type Description List <T> The sorted list. Type Parameters Name Description T The type of elements in the list. Examples List<int> numbers = new() { 5, 3, 8, 1 }; numbers.SortInPlace((a, b) => a.CompareTo(b)); // numbers is now sorted: 1, 3, 5, 8"
  },
  "api/UniUtils.Extensions.ObjectExtension.html": {
    "href": "api/UniUtils.Extensions.ObjectExtension.html",
    "title": "Class ObjectExtension | UniUtils Documentation",
    "keywords": "Class ObjectExtension Provides extension methods for objects to enhance logging functionality. Inheritance System.Object ObjectExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class ObjectExtension Methods Log(Object, Object) Logs a message with the object's type prefix. Declaration public static void Log(this object obj, object message) Parameters Type Name Description System.Object obj The object to log the message for. System.Object message The message to log. Examples this.Log(\"Hello, World!\"); Log(Object, Object[]) Logs multiple messages with the object's type prefix. Declaration public static void Log(this object obj, params object[] messages) Parameters Type Name Description System.Object obj The object to log the messages for. System.Object [] messages The messages to log. Examples this.Log(\"Health:\", playerHealth, \"Score:\", playerScore); LogError(Object, Object) Logs an error message with the object's type prefix. Declaration public static void LogError(this object obj, object message) Parameters Type Name Description System.Object obj The object to log the error message for. System.Object message The error message to log. Examples this.LogError(\"Player died unexpectedly.\"); LogError(Object, Object[]) Logs multiple error messages with the object's type prefix. Declaration public static void LogError(this object obj, params object[] messages) Parameters Type Name Description System.Object obj The object to log the error messages for. System.Object [] messages The error messages to log. Examples this.LogError(\"Error code:\", errorCode, \"Details:\", errorDetails); LogException(Object, Exception) Logs an exception with the object's type prefix. Declaration public static void LogException(this object obj, Exception exception) Parameters Type Name Description System.Object obj The object to log the exception for. Exception exception The exception to log. Examples try { // some code that may throw } catch (Exception ex) { this.LogException(ex); } LogException(Object, String, Exception) Logs an exception with a custom message and the object's type prefix. Declaration public static void LogException(this object obj, string message, Exception exception) Parameters Type Name Description System.Object obj The object to log the exception for. System.String message The custom message to include with the exception. Exception exception The exception to log. Examples try { // some code that may throw } catch (Exception ex) { this.LogException(\"Custom error message\", ex); } LogWarning(Object, Object) Logs a warning message with the object's type prefix. Declaration public static void LogWarning(this object obj, object message) Parameters Type Name Description System.Object obj The object to log the warning message for. System.Object message The warning message to log. Examples this.LogWarning(\"Low health detected!\"); LogWarning(Object, Object[]) Logs multiple warning messages with the object's type prefix. Declaration public static void LogWarning(this object obj, params object[] messages) Parameters Type Name Description System.Object obj The object to log the warning messages for. System.Object [] messages The warning messages to log. Examples this.LogWarning(\"Low health:\", health, \"Ammo:\", ammoCount);"
  },
  "api/UniUtils.Extensions.QuaternionExtension.html": {
    "href": "api/UniUtils.Extensions.QuaternionExtension.html",
    "title": "Class QuaternionExtension | UniUtils Documentation",
    "keywords": "Class QuaternionExtension Provides extension methods for the Quaternion class. Inheritance System.Object QuaternionExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class QuaternionExtension Methods With(Quaternion, Nullable<Single>, Nullable<Single>, Nullable<Single>) Returns a new Quaternion with the specified Euler angles applied. Declaration public static Quaternion With(this Quaternion quaternion, float? x = null, float? y = null, float? z = null) Parameters Type Name Description Quaternion quaternion The original Quaternion. System.Nullable < System.Single > x The x component of the Euler angles to apply. Defaults to 0 if null. System.Nullable < System.Single > y The y component of the Euler angles to apply. Defaults to 0 if null. System.Nullable < System.Single > z The z component of the Euler angles to apply. Defaults to 0 if null. Returns Type Description Quaternion A new Quaternion with the specified Euler angles applied. Examples Quaternion original = Quaternion.Euler(10, 20, 30); Quaternion modified = original.With(y: 45); Debug.Log(modified.eulerAngles); // Output: (10, 45, 30)"
  },
  "api/UniUtils.Extensions.RayExtension.html": {
    "href": "api/UniUtils.Extensions.RayExtension.html",
    "title": "Class RayExtension | UniUtils Documentation",
    "keywords": "Class RayExtension Provides extensions for Rays. Inheritance System.Object RayExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class RayExtension Methods Draw(Ray, Color, Single, Single) Draws a ray in the Unity editor for debugging purposes. Declaration public static void Draw(this Ray ray, Color color, float length = 100F, float duration = 0.25F) Parameters Type Name Description Ray ray The ray to draw. Color color The color of the ray. System.Single length The length of the ray (default is 100f). System.Single duration The duration the ray will be visible in seconds (default is 0.25f). Examples Ray ray = new Ray(transform.position, transform.forward); ray.Draw(Color.red, 50f, 1f);"
  },
  "api/UniUtils.Extensions.RectExtension.html": {
    "href": "api/UniUtils.Extensions.RectExtension.html",
    "title": "Class RectExtension | UniUtils Documentation",
    "keywords": "Class RectExtension Inheritance System.Object RectExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class RectExtension Methods ToLocalSpace(Rect, Transform) Converts a Rect from world space to local space. Declaration public static Rect ToLocalSpace(this Rect r, Transform transform) Parameters Type Name Description Rect r The Rect to convert. Transform transform The Transform to use for conversion. Returns Type Description Rect A Rect in local space. Examples Rect worldRect = new Rect(0, 0, 1, 1); Rect localRect = worldRect.ToLocalSpace(transform); ToWorldSpace(Rect, Transform) Converts a Rect from local space to world space. Declaration public static Rect ToWorldSpace(this Rect r, Transform transform) Parameters Type Name Description Rect r The Rect to convert. Transform transform The Transform to use for conversion. Returns Type Description Rect A Rect in world space. Examples Rect localRect = new Rect(0, 0, 1, 1); Rect worldRect = localRect.ToWorldSpace(transform);"
  },
  "api/UniUtils.Extensions.RectTransformExtension.html": {
    "href": "api/UniUtils.Extensions.RectTransformExtension.html",
    "title": "Class RectTransformExtension | UniUtils Documentation",
    "keywords": "Class RectTransformExtension Provides extension methods for RectTransforms. Inheritance System.Object RectTransformExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class RectTransformExtension Methods RebuildLayout(RectTransform) Rebuilds the layout of the rect transform to fix potential sizing issues and UI glitches. Declaration public static IEnumerator RebuildLayout(this RectTransform rect) Parameters Type Name Description RectTransform rect The RectTransform of object. Returns Type Description IEnumerator An IEnumerator for the coroutine. Examples StartCoroutine(myRectTransform.RebuildLayout());"
  },
  "api/UniUtils.Extensions.StringExtension.html": {
    "href": "api/UniUtils.Extensions.StringExtension.html",
    "title": "Class StringExtension | UniUtils Documentation",
    "keywords": "Class StringExtension Provides extension methods for Strings. Inheritance System.Object StringExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class StringExtension Methods Sanitize(String, String) Sanitizes the input string by replacing spaces with underscores and removing special characters. Declaration public static string Sanitize(this string text, string allowedPattern = \"A-Za-z0-9_\") Parameters Type Name Description System.String text The input string to be sanitized. System.String allowedPattern A regex pattern defining the set of allowed characters. Defaults to \"A-Za-z0-9_\", which allows alphanumeric characters and underscores. Returns Type Description System.String A sanitized string with spaces replaced by underscores and disallowed characters removed. Examples string sanitized = \"Hello, World!\".Sanitize(); // sanitized == \"Hello_World\" Swap(String, String, String) Swaps occurrences of two specified substrings within the given text. Declaration public static string Swap(this string text, string swapA, string swapB) Parameters Type Name Description System.String text The original text where the swap will occur. System.String swapA The first substring to swap. System.String swapB The second substring to swap. Returns Type Description System.String A new string with the specified substrings swapped. Examples string result = \"hello world\".Swap(\"hello\", \"world\"); // result == \"world hello\" Truncate(String, Int32, String) Truncates the input string to a specified maximum length without cutting off words. Appends a truncation indicator if necessary. Declaration public static string Truncate(this string text, int maxLength, string indicator = \"...\") Parameters Type Name Description System.String text The input string to be truncated. System.Int32 maxLength The maximum length of the truncated string (not counting the indicator). System.String indicator The string to append if truncation occurs. Defaults to \"...\". Returns Type Description System.String A truncated string that ends on a word boundary (space/tab/newline) with the truncation indicator appended. Returns the original string if it's shorter than or equal to maxLength. Returns an empty string if the input is null or maxLength is negative. Examples string t1 = \"This is a long string\".Truncate(10); // t1 == \"This is a…\" string t2 = \"Short\".Truncate(10); // t2 == \"Short\" string t3 = null.Truncate(5); // t3 == \"\" string t4 = \"Supercalifragilistic\".Truncate(5); // t4 == \"Super…\""
  },
  "api/UniUtils.Extensions.TransformExtension.html": {
    "href": "api/UniUtils.Extensions.TransformExtension.html",
    "title": "Class TransformExtension | UniUtils Documentation",
    "keywords": "Class TransformExtension Provides extension methods for the Transform class. Inheritance System.Object TransformExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class TransformExtension Methods MoveToTargetTransform(Transform, Transform, Single) Smoothly moves a Transform to match the position and rotation of a target Transform over a specified duration. Declaration public static IEnumerator MoveToTargetTransform(this Transform target, Transform destination, float duration = 0.5F) Parameters Type Name Description Transform target The Transform to move. Transform destination The target Transform to move towards. System.Single duration The duration of the movement in seconds. Defaults to 0.5 seconds. Returns Type Description IEnumerator An IEnumerator that can be used in a coroutine to perform the movement. Examples StartCoroutine(transform.MoveToTargetTransform(targetTransform, 1.0f)); Raycast(Transform, Vector3, out RaycastHit, LayerMask, Vector3, Vector3, Single, QueryTriggerInteraction, Boolean) Performs a raycast from the Transform's position towards a target position, with optional offsets and settings. Declaration public static bool Raycast(this Transform transform, Vector3 targetPosition, out RaycastHit hit, LayerMask includedLayers, Vector3 localRayOffset = null, Vector3 targetRayOffset = null, float maxDistance = 3.40282347E+38F, QueryTriggerInteraction queryTriggerInteraction = null, bool drawRay = false) Parameters Type Name Description Transform transform The Transform from which the raycast originates. Vector3 targetPosition The position to raycast towards. RaycastHit hit The RaycastHit object that will store information about the hit. LayerMask includedLayers The layers to include in the raycast. Vector3 localRayOffset An optional offset applied to the ray's origin. Vector3 targetRayOffset An optional offset applied to the ray's target position. System.Single maxDistance The maximum distance for the raycast. Defaults to float.MaxValue. QueryTriggerInteraction queryTriggerInteraction Specifies whether the raycast should interact with trigger colliders. System.Boolean drawRay Whether to draw the ray in the scene for debugging purposes. Returns Type Description System.Boolean True if the raycast hits an object; otherwise, false. RaycastDirection(Transform, Vector3, out RaycastHit, LayerMask, Vector3, Single, QueryTriggerInteraction, Boolean) Performs a raycast from the Transform's position in a specified direction, with optional offsets and settings. Declaration public static bool RaycastDirection(this Transform transform, Vector3 direction, out RaycastHit hit, LayerMask includedLayers, Vector3 localRayOffset = null, float maxDistance = 3.40282347E+38F, QueryTriggerInteraction queryTriggerInteraction = null, bool drawRay = false) Parameters Type Name Description Transform transform The Transform from which the raycast originates. Vector3 direction The direction in which to raycast. RaycastHit hit The RaycastHit object that will store information about the hit. LayerMask includedLayers The layers to include in the raycast. Vector3 localRayOffset An optional offset applied to the ray's origin. System.Single maxDistance The maximum distance for the raycast. Defaults to float.MaxValue. QueryTriggerInteraction queryTriggerInteraction Specifies whether the raycast should interact with trigger colliders. System.Boolean drawRay Whether to draw the ray in the scene for debugging purposes. Returns Type Description System.Boolean True if the raycast hits an object; otherwise, false."
  },
  "api/UniUtils.Extensions.Vector3Extension.html": {
    "href": "api/UniUtils.Extensions.Vector3Extension.html",
    "title": "Class Vector3Extension | UniUtils Documentation",
    "keywords": "Class Vector3Extension Provides extension methods for the Vector3 class. Inheritance System.Object Vector3Extension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Extensions Assembly : cs.temp.dll.dll Syntax public static class Vector3Extension Methods DistanceTo(Vector3, Vector3) Calculates the distance between two vectors. Declaration public static float DistanceTo(this Vector3 vector, Vector3 other) Parameters Type Name Description Vector3 vector The original vector. Vector3 other The vector to calculate the distance to. Returns Type Description System.Single The distance between the two vectors. Examples Vector3 a = new Vector3(0, 0, 0); Vector3 b = new Vector3(3, 4, 0); float dist = a.DistanceTo(b); // Result: 5 Divide(Vector3, Single) Divides each component of the vector by a scalar value. Declaration public static Vector3 Divide(this Vector3 vector, float value) Parameters Type Name Description Vector3 vector The original vector. System.Single value The scalar value to divide by. Returns Type Description Vector3 A new vector with each component divided by the scalar value, or the original component if the divisor is zero. Examples Vector3 v = new Vector3(10, 20, 30); Vector3 result = v.Divide(2); // Result: (5, 10, 15) Divide(Vector3, Vector3) Divides each component of the vector by the corresponding component of another vector. Declaration public static Vector3 Divide(this Vector3 vector, Vector3 other) Parameters Type Name Description Vector3 vector The original vector. Vector3 other The vector to divide by. Returns Type Description Vector3 A new vector with each component divided by the corresponding component of the other vector, or the original component if the divisor is zero. Examples Vector3 a = new Vector3(10, 20, 30); Vector3 b = new Vector3(2, 0, 5); Vector3 result = a.Divide(b); // Result: (5, 20, 6) — y unchanged because divisor is 0 Multiply(Vector3, Single) Multiplies each component of the vector by a scalar value. Declaration public static Vector3 Multiply(this Vector3 vector, float value) Parameters Type Name Description Vector3 vector The original vector. System.Single value The scalar value to multiply with. Returns Type Description Vector3 A new vector with each component multiplied by the scalar value. Examples Vector3 v = new Vector3(1, 2, 3); Vector3 result = v.Multiply(2); // Result: (2, 4, 6) Multiply(Vector3, Vector3) Multiplies each component of the vector by the corresponding component of another vector. Declaration public static Vector3 Multiply(this Vector3 vector, Vector3 other) Parameters Type Name Description Vector3 vector The original vector. Vector3 other The vector to multiply with. Returns Type Description Vector3 A new vector with each component multiplied by the corresponding component of the other vector. Examples Vector3 a = new Vector3(2, 3, 4); Vector3 b = new Vector3(5, 6, 7); Vector3 result = a.Multiply(b); // Result: (10, 18, 28) With(Vector3, Nullable<Single>, Nullable<Single>, Nullable<Single>) Creates a new vector with the specified components replaced by the provided values. Declaration public static Vector3 With(this Vector3 vector, float? x = null, float? y = null, float? z = null) Parameters Type Name Description Vector3 vector The original vector. System.Nullable < System.Single > x The new x-component value, or null to keep the original x-component. System.Nullable < System.Single > y The new y-component value, or null to keep the original y-component. System.Nullable < System.Single > z The new z-component value, or null to keep the original z-component. Returns Type Description Vector3 A new vector with the specified components replaced by the provided values. Examples Vector3 v = new Vector3(1, 2, 3); Vector3 modified = v.With(y: 10); // Result: (1, 10, 3)"
  },
  "api/UniUtils.FSM.FunctionPredicate.html": {
    "href": "api/UniUtils.FSM.FunctionPredicate.html",
    "title": "Class FunctionPredicate | UniUtils Documentation",
    "keywords": "Class FunctionPredicate A concrete implementation of IPredicate that uses a function delegate to evaluate a condition. Inheritance System.Object FunctionPredicate Implements IPredicate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.FSM Assembly : cs.temp.dll.dll Syntax public class FunctionPredicate : IPredicate Examples Example usage: bool isHealthLow = false; IPredicate lowHealthPredicate = new FunctionPredicate(() => isHealthLow); if (lowHealthPredicate.Evaluate()) { Debug.Log(\"Health is low!\"); } Constructors FunctionPredicate(Func<Boolean>) Declaration public FunctionPredicate(Func<bool> predicate) Parameters Type Name Description Func < System.Boolean > predicate Methods Evaluate() Declaration public bool Evaluate() Returns Type Description System.Boolean Operators LogicalNot(FunctionPredicate) Declaration public static IPredicate operator !(FunctionPredicate original) Parameters Type Name Description FunctionPredicate original Returns Type Description IPredicate Implements IPredicate"
  },
  "api/UniUtils.FSM.html": {
    "href": "api/UniUtils.FSM.html",
    "title": "Namespace UniUtils.FSM | UniUtils Documentation",
    "keywords": "Namespace UniUtils.FSM Classes FunctionPredicate A concrete implementation of IPredicate that uses a function delegate to evaluate a condition. NotPredicate Represents a predicate that negates the result of another predicate. StateMachine Represents a state machine that manages state transitions and updates. StateNode Represents a node in the state machine, holding a state and its transitions. Transition Implements a transition between states in a state machine. Interfaces IPredicate Represents a predicate that can be evaluated to determine a boolean condition. IState Represents a state in the state machine. ITransition Represents a transition between states in a state machine."
  },
  "api/UniUtils.FSM.IPredicate.html": {
    "href": "api/UniUtils.FSM.IPredicate.html",
    "title": "Interface IPredicate | UniUtils Documentation",
    "keywords": "Interface IPredicate Represents a predicate that can be evaluated to determine a boolean condition. Namespace : UniUtils.FSM Assembly : cs.temp.dll.dll Syntax public interface IPredicate Methods Evaluate() Declaration bool Evaluate() Returns Type Description System.Boolean"
  },
  "api/UniUtils.FSM.IState.html": {
    "href": "api/UniUtils.FSM.IState.html",
    "title": "Interface IState | UniUtils Documentation",
    "keywords": "Interface IState Represents a state in the state machine. Namespace : UniUtils.FSM Assembly : cs.temp.dll.dll Syntax public interface IState Examples Example implementation of a state: public class IdleState : IState { public void Enter() { Debug.Log(\"Entering Idle State\"); } public void Update() { // Idle behavior } public void FixedUpdate() { // Physics-related idle behavior } public void Exit() { Debug.Log(\"Exiting Idle State\"); } } Methods Enter() Called when the state is entered. Declaration void Enter() Exit() Called when the state is exited. Declaration void Exit() FixedUpdate() Called at fixed intervals to update the state. Declaration void FixedUpdate() Update() Called every frame to update the state. Declaration void Update()"
  },
  "api/UniUtils.FSM.ITransition.html": {
    "href": "api/UniUtils.FSM.ITransition.html",
    "title": "Interface ITransition | UniUtils Documentation",
    "keywords": "Interface ITransition Represents a transition between states in a state machine. Namespace : UniUtils.FSM Assembly : cs.temp.dll.dll Syntax public interface ITransition Properties Predicate Gets the predicate that determines if the transition should occur. Declaration IPredicate Predicate { get; } Property Value Type Description IPredicate TargetState Gets the target state of the transition. Declaration IState TargetState { get; } Property Value Type Description IState"
  },
  "api/UniUtils.FSM.NotPredicate.html": {
    "href": "api/UniUtils.FSM.NotPredicate.html",
    "title": "Class NotPredicate | UniUtils Documentation",
    "keywords": "Class NotPredicate Represents a predicate that negates the result of another predicate. Inheritance System.Object NotPredicate Implements IPredicate Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.FSM Assembly : cs.temp.dll.dll Syntax public class NotPredicate : IPredicate Constructors NotPredicate(IPredicate) Declaration public NotPredicate(IPredicate original) Parameters Type Name Description IPredicate original Methods Evaluate() Evaluates the predicate by negating the result of the original predicate. Declaration public bool Evaluate() Returns Type Description System.Boolean true if the original predicate evaluates to false ; otherwise, false . Implements IPredicate"
  },
  "api/UniUtils.FSM.StateMachine.html": {
    "href": "api/UniUtils.FSM.StateMachine.html",
    "title": "Class StateMachine | UniUtils Documentation",
    "keywords": "Class StateMachine Represents a state machine that manages state transitions and updates. Inheritance System.Object StateMachine Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.FSM Assembly : cs.temp.dll.dll Syntax public class StateMachine Examples Example usage: public class IdleState : IState { public void Enter() => Debug.Log(\"Entered Idle\"); public void Update() => Debug.Log(\"Updating Idle\"); public void FixedUpdate() { } public void Exit() => Debug.Log(\"Exited Idle\"); } public class MoveState : IState { public void Enter() => Debug.Log(\"Entered Move\"); public void Update() => Debug.Log(\"Updating Move\"); public void FixedUpdate() { } public void Exit() => Debug.Log(\"Exited Move\"); } void SetupStateMachine() { IdleState idle = new IdleState(); MoveState move = new MoveState(); StateMachine stateMachine = new StateMachine(); // Add transitions stateMachine.AddTransition(idle, move, new FunctionPredicate(() => Input.GetKey(KeyCode.Space))); stateMachine.AddTransition(move, idle, new FunctionPredicate(() => !Input.GetKey(KeyCode.Space))); // Start in Idle stateMachine.SetState(idle); // In your MonoBehaviour.Update(): stateMachine.Update(); } Properties CurrentState Declaration public StateNode CurrentState { get; } Property Value Type Description StateNode Methods AddAnyTransition(IState, IPredicate) Adds a transition from any state to a specified state with a specified predicate. Declaration public void AddAnyTransition(IState to, IPredicate predicate) Parameters Type Name Description IState to The state to transition to. IPredicate predicate The predicate that determines if the transition should occur. AddTransition(IState, IState, IPredicate) Adds a transition from one state to another with a specified predicate. Declaration public void AddTransition(IState from, IState to, IPredicate predicate) Parameters Type Name Description IState from The state to transition from. IState to The state to transition to. IPredicate predicate The predicate that determines if the transition should occur. FixedUpdate() Calls the FixedUpdate method on the current state. Declaration public void FixedUpdate() SetState(IState) Sets the current state of the state machine. Declaration public void SetState(IState state) Parameters Type Name Description IState state The new state to set. Update() Updates the state machine, checking for transitions and updating the current state. Declaration public void Update() Events OnStateChanged Declaration public event Action<IState> OnStateChanged Event Type Type Description Action < IState >"
  },
  "api/UniUtils.FSM.StateNode.html": {
    "href": "api/UniUtils.FSM.StateNode.html",
    "title": "Class StateNode | UniUtils Documentation",
    "keywords": "Class StateNode Represents a node in the state machine, holding a state and its transitions. Inheritance System.Object StateNode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.FSM Assembly : cs.temp.dll.dll Syntax public sealed class StateNode Constructors StateNode(IState) Initializes a new instance of the StateNode class with the specified state. Declaration public StateNode(IState state) Parameters Type Name Description IState state The state to associate with this node. Properties State Gets the state associated with this node. Declaration public IState State { get; } Property Value Type Description IState Transitions Gets the set of transitions from this state. Declaration public HashSet<ITransition> Transitions { get; } Property Value Type Description HashSet < ITransition > Methods AddTransition(IState, IPredicate) Adds a transition from this state to another state with a specified predicate. Declaration public void AddTransition(IState to, IPredicate predicate) Parameters Type Name Description IState to The state to transition to. IPredicate predicate The predicate that determines if the transition should occur."
  },
  "api/UniUtils.FSM.Transition.html": {
    "href": "api/UniUtils.FSM.Transition.html",
    "title": "Class Transition | UniUtils Documentation",
    "keywords": "Class Transition Implements a transition between states in a state machine. Inheritance System.Object Transition Implements ITransition Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.FSM Assembly : cs.temp.dll.dll Syntax public class Transition : ITransition Examples Example usage: void CreateTransition() { IState idle = new IdleState(); IState move = new MoveState(); IPredicate canMove = new FunctionPredicate(() => Input.GetKey(KeyCode.Space)); ITransition transition = new Transition(canMove, move); // Example: use in a state machine StateMachine stateMachine = new StateMachine(); stateMachine.AddTransition(idle, move, canMove); } Constructors Transition(IPredicate, IState) Initializes a new instance of the Transition class. Declaration public Transition(IPredicate predicate, IState targetState) Parameters Type Name Description IPredicate predicate The predicate that determines if the transition should occur. IState targetState The target state of the transition. Properties Predicate Gets the predicate that determines if the transition should occur. Declaration public IPredicate Predicate { get; } Property Value Type Description IPredicate TargetState Gets the target state of the transition. Declaration public IState TargetState { get; } Property Value Type Description IState Implements ITransition"
  },
  "api/UniUtils.GameObjects.ColliderEvent.html": {
    "href": "api/UniUtils.GameObjects.ColliderEvent.html",
    "title": "Struct ColliderEvent | UniUtils Documentation",
    "keywords": "Struct ColliderEvent Struct representing a collider event with callbacks for enter and exit interactions. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public struct ColliderEvent Fields OnEnter The action to invoke when a collider with the matching tag enters this collider. Declaration public Action<GameObject, ContactPoint[]> OnEnter Field Value Type Description Action < GameObject , ContactPoint []> Remarks The first parameter is the other UnityEngine.GameObject involved in the collision. The second parameter is an array of UnityEngine.ContactPoint providing collision details. OnExit The action to invoke when a collider with the matching tag exits this collider. Declaration public Action<GameObject, ContactPoint[]> OnExit Field Value Type Description Action < GameObject , ContactPoint []> Remarks The first parameter is the other UnityEngine.GameObject involved in the collision. The second parameter is an array of UnityEngine.ContactPoint from the exit interaction. Tag The tag of the GameObject to match during collision events. Only GameObjects with this tag will trigger the callbacks. Declaration public string Tag Field Value Type Description System.String"
  },
  "api/UniUtils.GameObjects.ColliderEventEntry.html": {
    "href": "api/UniUtils.GameObjects.ColliderEventEntry.html",
    "title": "Struct ColliderEventEntry | UniUtils Documentation",
    "keywords": "Struct ColliderEventEntry Stores collision and trigger events. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public struct ColliderEventEntry Fields CollisionEvent Declaration public ColliderEvent CollisionEvent Field Value Type Description ColliderEvent TriggerEvent Declaration public ColliderEvent TriggerEvent Field Value Type Description ColliderEvent"
  },
  "api/UniUtils.GameObjects.ColliderEventHandler.html": {
    "href": "api/UniUtils.GameObjects.ColliderEventHandler.html",
    "title": "Class ColliderEventHandler | UniUtils Documentation",
    "keywords": "Class ColliderEventHandler Handles runtime registration of collision and trigger events based on object tags. Inheritance System.Object ColliderEventHandler Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public abstract class ColliderEventHandler : MonoBehaviour Examples public class MyColliderHandler : ColliderEventHandler { private void Start() { // Register a collision event for objects tagged \"Enemy\" RegisterColliderEvent(new ColliderEvent { Tag = \"Enemy\", OnEnter = (go, contacts) => Debug.Log($\"Enemy collided with {go.name}\"), OnExit = (go, contacts) => Debug.Log($\"Enemy stopped colliding with {go.name}\") }); // Register a trigger event for objects tagged \"Pickup\" RegisterColliderEvent(new ColliderEvent { Tag = \"Pickup\", OnEnter = (go, _) => Debug.Log($\"Entered pickup trigger: {go.name}\"), OnExit = (go, _) => Debug.Log($\"Exited pickup trigger: {go.name}\") }, isTriggerEvent: true); } } Methods RegisterColliderEvent(ColliderEvent, Boolean) Registers a collider event by tag. Declaration protected void RegisterColliderEvent(ColliderEvent colliderEvent, bool isTriggerEvent = false) Parameters Type Name Description ColliderEvent colliderEvent System.Boolean isTriggerEvent UnregisterColliderEvent(String) Unregisters a collider event by a given tag. Declaration protected void UnregisterColliderEvent(string eventTag) Parameters Type Name Description System.String eventTag"
  },
  "api/UniUtils.GameObjects.EphemeralSingleton-1.html": {
    "href": "api/UniUtils.GameObjects.EphemeralSingleton-1.html",
    "title": "Class EphemeralSingleton<T> | UniUtils Documentation",
    "keywords": "Class EphemeralSingleton<T> An ephemeral singleton that does not persist across scene loads. Inheritance System.Object Singleton <T> EphemeralSingleton<T> GenericObjectPool<T> Inherited Members Singleton<T>.instance Singleton<T>.Instance Singleton<T>.Awake() Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public abstract class EphemeralSingleton<T> : Singleton<T> where T : MonoBehaviour Type Parameters Name Description T Type of the singleton class. Examples // Example usage of EphemeralSingleton public class UIManager : EphemeralSingleton<UIManager> { public void ShowMenu() { Debug.Log(\"Showing menu\"); } } public class MainMenu : MonoBehaviour { void OnEnable() { UIManager.Instance.ShowMenu(); } }"
  },
  "api/UniUtils.GameObjects.GenericObjectPool-1.html": {
    "href": "api/UniUtils.GameObjects.GenericObjectPool-1.html",
    "title": "Class GenericObjectPool<T> | UniUtils Documentation",
    "keywords": "Class GenericObjectPool<T> A generic object pool for managing reusable objects of type T. Inheritance System.Object Singleton < GenericObjectPool <T>> EphemeralSingleton < GenericObjectPool <T>> GenericObjectPool<T> Inherited Members Singleton<GenericObjectPool<T>>.instance Singleton<GenericObjectPool<T>>.Instance Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public abstract class GenericObjectPool<T> : EphemeralSingleton<GenericObjectPool<T>> where T : Component Type Parameters Name Description T The type of objects to pool, which must be a Component. Fields activatePooledObjects Declaration protected bool activatePooledObjects Field Value Type Description System.Boolean activeObjects Declaration protected readonly LinkedList<T> activeObjects Field Value Type Description LinkedList <T> allObjects Declaration protected readonly HashSet<T> allObjects Field Value Type Description HashSet <T> allowObjectRecycling Declaration protected bool allowObjectRecycling Field Value Type Description System.Boolean awakeObjectsBatchSize Declaration protected int awakeObjectsBatchSize Field Value Type Description System.Int32 awakeObjectsOnCreation Declaration protected bool awakeObjectsOnCreation Field Value Type Description System.Boolean maxPoolSize Declaration protected int maxPoolSize Field Value Type Description System.Int32 prefab Declaration protected T prefab Field Value Type Description T prewarmCount Declaration protected int prewarmCount Field Value Type Description System.Int32 readyToUseObjects Declaration protected readonly Queue<T> readyToUseObjects Field Value Type Description Queue <T> Properties ActiveObjects Declaration public IReadOnlyCollection<T> ActiveObjects { get; } Property Value Type Description IReadOnlyCollection <T> The collection of currently active objects in the pool. AvailableSlots Declaration public int AvailableSlots { get; } Property Value Type Description System.Int32 The number of available slots in the pool for new objects. Methods AddObjects(Int32) Adds a specified number of objects to the pool, up to the available slots. Declaration protected virtual void AddObjects(int count) Parameters Type Name Description System.Int32 count The number of objects to add to the pool. Awake() Initializes the pool and prewarms objects if specified. Declaration protected override void Awake() Overrides UniUtils.GameObjects.Singleton<UniUtils.GameObjects.GenericObjectPool<T>>.Awake() Examples public class Bullet : MonoBehaviour { // Bullet logic here } public class BulletPool : GenericObjectPool<Bullet> { // Optionally add pool-specific logic here // The Pool has to be placed in the scene. Within the inspector, you have to assign it's prefab. } public class PlayerShooter : MonoBehaviour { private void Shoot() { Bullet bullet = BulletPool.Instance.Get(); bullet.transform.position = transform.position; bullet.gameObject.SetActive(true); // Setup bullet, e.g., velocity, direction... } private void OnBulletFinished(Bullet bullet) { BulletPool.Instance.ReturnToPool(bullet); } } CreateInstance() Creates a new instance of the prefab and initializes it for use in the pool. Declaration protected virtual T CreateInstance() Returns Type Description T A new instance of type T with its GameObject deactivated. Get() Retrieves an object from the pool. If no objects are available, attempts to create or recycle one. Declaration public virtual T Get() Returns Type Description T A pooled object of type T or null if the operation fails. Examples // Example: shooting bullets Bullet bullet = BulletPool.Instance.Get(); if (bullet != null) { bullet.transform.position = transform.position; } Get(Vector3, Quaternion, Transform) Retrieves an object from the pool and sets its position, rotation, and parent transform. If no objects are available, attempts to create or recycle one. Declaration public virtual T Get(Vector3 position, Quaternion rotation, Transform parent = null) Parameters Type Name Description Vector3 position The position to set for the object. Quaternion rotation The rotation to set for the object. Transform parent The parent transform to assign to the object. Defaults to null . Returns Type Description T A pooled object of type T or null if the operation fails. Examples Vector3 pos = transform.position + transform.forward * 2f; Quaternion rot = Quaternion.identity; Bullet bullet = BulletPool.Instance.Get(pos, rot, this.transform); GetOrCreateObject(out Boolean) Retrieves an object from the pool or creates/recycles one if necessary. Declaration protected virtual T GetOrCreateObject(out bool wasNew) Parameters Type Name Description System.Boolean wasNew Outputs whether the object was newly created ( true ) or retrieved from the pool ( false ). Returns Type Description T A pooled object of type T or null if the operation fails. NotifyPooled(T, Boolean) Notifies that an object has been pooled and invokes relevant events. Declaration protected virtual void NotifyPooled(T obj, bool wasNew) Parameters Type Name Description T obj The object that has been pooled. System.Boolean wasNew Indicates whether the object was newly created ( true ) or retrieved from the pool ( false ). PrewarmCoroutine(Int32) Prewarms the object pool by activating and deactivating objects in batches. This ensures that objects are properly initialized before use. Declaration protected virtual IEnumerator PrewarmCoroutine(int batchSize = 50) Parameters Type Name Description System.Int32 batchSize The number of objects to activate and deactivate in each batch. Defaults to 50. Returns Type Description IEnumerator An enumerator that performs the prewarming operation over multiple frames. ReturnToPool(T) Returns an object to the pool. Declaration public virtual void ReturnToPool(T objectToReturn) Parameters Type Name Description T objectToReturn The object to return to the pool. Examples // When a bullet finishes: BulletPool.Instance.ReturnToPool(bullet); Events OnObjectPooled Declaration public event Action<T> OnObjectPooled Event Type Type Description Action <T> OnObjectRecycled Declaration public event Action<T> OnObjectRecycled Event Type Type Description Action <T> OnObjectReturned Declaration public event Action<T> OnObjectReturned Event Type Type Description Action <T> OnPrewarmCompleted Declaration public event Action<List<T>> OnPrewarmCompleted Event Type Type Description Action < List <T>>"
  },
  "api/UniUtils.GameObjects.html": {
    "href": "api/UniUtils.GameObjects.html",
    "title": "Namespace UniUtils.GameObjects | UniUtils Documentation",
    "keywords": "Namespace UniUtils.GameObjects Classes ColliderEventHandler Handles runtime registration of collision and trigger events based on object tags. EphemeralSingleton<T> An ephemeral singleton that does not persist across scene loads. GenericObjectPool<T> A generic object pool for managing reusable objects of type T. PersistentObject A Unity component that assigns a unique GUID to the object for persistent identification. PersistentSingleton<T> A persistent singleton that is not destroyed on scene load. Singleton<T> Abstract base class for creating singleton MonoBehaviour instances. Structs ColliderEvent Struct representing a collider event with callbacks for enter and exit interactions. ColliderEventEntry Stores collision and trigger events. Interfaces IPoolable Interface for objects that can be managed by a pool. Provides methods to handle pooling, recycling, and returning operations."
  },
  "api/UniUtils.GameObjects.IPoolable.html": {
    "href": "api/UniUtils.GameObjects.IPoolable.html",
    "title": "Interface IPoolable | UniUtils Documentation",
    "keywords": "Interface IPoolable Interface for objects that can be managed by a pool. Provides methods to handle pooling, recycling, and returning operations. Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public interface IPoolable Methods OnPooled() Declaration void OnPooled() OnRecycled() Declaration void OnRecycled() OnReturned() Declaration void OnReturned()"
  },
  "api/UniUtils.GameObjects.PersistentObject.html": {
    "href": "api/UniUtils.GameObjects.PersistentObject.html",
    "title": "Class PersistentObject | UniUtils Documentation",
    "keywords": "Class PersistentObject A Unity component that assigns a unique GUID to the object for persistent identification. Inheritance System.Object PersistentObject Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public class PersistentObject : MonoBehaviour Examples // Attach PersistentObject component to any GameObject in the editor. // When you create or duplicate the GameObject, it automatically gets a unique GUID. public class ExampleUsage : MonoBehaviour { private void Start() { PersistentObject persistent = gameObject.GetComponent<PersistentObject>(); if (persistent != null) { Debug.Log(\"Persistent GUID: \" + persistent.guid); } } } Fields guid Declaration public string guid Field Value Type Description System.String"
  },
  "api/UniUtils.GameObjects.PersistentSingleton-1.html": {
    "href": "api/UniUtils.GameObjects.PersistentSingleton-1.html",
    "title": "Class PersistentSingleton<T> | UniUtils Documentation",
    "keywords": "Class PersistentSingleton<T> A persistent singleton that is not destroyed on scene load. Inheritance System.Object Singleton <T> PersistentSingleton<T> Inherited Members Singleton<T>.instance Singleton<T>.Instance Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public abstract class PersistentSingleton<T> : Singleton<T> where T : MonoBehaviour Type Parameters Name Description T Type of the singleton class. Examples // Example usage of PersistentSingleton public class AudioManager : PersistentSingleton<AudioManager> { public void PlaySound(string clipName) { Debug.Log(\"Playing sound: \" + clipName); } } public class GameController : MonoBehaviour { void Start() { AudioManager.Instance.PlaySound(\"GameStart\"); } } Methods Awake() Awake method to call DontDestroyOnLoad on the object. Declaration protected override void Awake() Overrides UniUtils.GameObjects.Singleton<T>.Awake()"
  },
  "api/UniUtils.GameObjects.Singleton-1.html": {
    "href": "api/UniUtils.GameObjects.Singleton-1.html",
    "title": "Class Singleton<T> | UniUtils Documentation",
    "keywords": "Class Singleton<T> Abstract base class for creating singleton MonoBehaviour instances. Inheritance System.Object Singleton<T> EphemeralSingleton<T> PersistentSingleton<T> Namespace : UniUtils.GameObjects Assembly : cs.temp.dll.dll Syntax public abstract class Singleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Type of the singleton class. Fields instance Declaration protected static T instance Field Value Type Description T Properties Instance Gets the singleton instance. If the instance is not found, it searches for it in the scene. Declaration public static T Instance { get; } Property Value Type Description T The singleton instance of type T. Methods Awake() Awake method to initialize the singleton instance. Declaration protected virtual void Awake()"
  },
  "api/UniUtils.Reflection.html": {
    "href": "api/UniUtils.Reflection.html",
    "title": "Namespace UniUtils.Reflection | UniUtils Documentation",
    "keywords": "Namespace UniUtils.Reflection Classes PredefinedAssemblyUtil Utility class for retrieving types from predefined assemblies."
  },
  "api/UniUtils.Reflection.PredefinedAssemblyUtil.html": {
    "href": "api/UniUtils.Reflection.PredefinedAssemblyUtil.html",
    "title": "Class PredefinedAssemblyUtil | UniUtils Documentation",
    "keywords": "Class PredefinedAssemblyUtil Utility class for retrieving types from predefined assemblies. Inheritance System.Object PredefinedAssemblyUtil Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : UniUtils.Reflection Assembly : cs.temp.dll.dll Syntax public static class PredefinedAssemblyUtil Methods GetTypes(Type, Boolean) Gets a list of types that are subclasses of the specified generic base type. Declaration public static List<Type> GetTypes(Type genericBaseType, bool includeInterfaces = false) Parameters Type Name Description Type genericBaseType The generic base type to match. System.Boolean includeInterfaces Whether to include interfaces in the search. Returns Type Description List < Type > A list of types that are subclasses of the specified generic base type. Examples Example usage: List<Type> derivedTypes = TypeUtility.GetTypes(typeof(MyGenericBase<>)); foreach (Type t in derivedTypes) { Debug.Log($\"Found: {t.FullName}\"); } Exceptions Type Condition System.Reflection.ReflectionTypeLoadException Thrown when there is an error loading types from an assembly."
  },
  "api/UniUtils.SceneManagement.html": {
    "href": "api/UniUtils.SceneManagement.html",
    "title": "Namespace UniUtils.SceneManagement | UniUtils Documentation",
    "keywords": "Namespace UniUtils.SceneManagement Classes SceneLoader Manages scene loading operations in Unity."
  },
  "api/UniUtils.SceneManagement.SceneLoader.html": {
    "href": "api/UniUtils.SceneManagement.SceneLoader.html",
    "title": "Class SceneLoader | UniUtils Documentation",
    "keywords": "Class SceneLoader Manages scene loading operations in Unity. Inheritance System.Object SceneLoader Namespace : UniUtils.SceneManagement Assembly : cs.temp.dll.dll Syntax public class SceneLoader : PersistentSingleton<SceneLoader> Examples // Example usage of SceneLoader public class GameFlowManager : MonoBehaviour { private void Start() { // Subscribe to scene loading events SceneLoader.Instance.OnSceneChangeStart += OnSceneStart; SceneLoader.Instance.OnSceneChangeProgressUpdate += OnProgressUpdate; SceneLoader.Instance.OnSceneChangeFinished += OnSceneFinished; // Start loading scene with index 2 SceneLoader.Instance.LoadScene(2, () => Debug.Log(\"Scene loaded successfully!\")); } private void OnSceneStart(int sceneIndex) { Debug.Log(\"Loading started for scene: \" + sceneIndex); } private void OnProgressUpdate(float progress) { Debug.Log(\"Loading progress: \" + (progress * 100) + \"%\"); } private void OnSceneFinished(int sceneIndex) { Debug.Log(\"Loading finished for scene: \" + sceneIndex); } } Methods LoadScene(Int32, Action) Starts the asynchronous scene loading process. Declaration public Coroutine LoadScene(int sceneIndex, Action callback = null) Parameters Type Name Description System.Int32 sceneIndex The index of the scene to load. Action callback Optional callback to invoke after the scene is loaded. Returns Type Description Coroutine A Coroutine for the asynchronous operation. Events OnSceneChangeFinished Event triggered when a scene change finishes. Declaration public event Action<int> OnSceneChangeFinished Event Type Type Description Action < System.Int32 > OnSceneChangeProgressUpdate Event triggered to update the progress of a scene change. Declaration public event Action<float> OnSceneChangeProgressUpdate Event Type Type Description Action < System.Single > OnSceneChangeStart Event triggered when a scene change starts. Declaration public event Action<int> OnSceneChangeStart Event Type Type Description Action < System.Int32 >"
  },
  "index.html": {
    "href": "index.html",
    "title": "UniUtils – C# Utilities & Extensions for Unity | UniUtils Documentation",
    "keywords": "UniUtils – C# Utilities & Extensions for Unity A lightweight collection of modular C# utilities and extensions designed to streamline Unity development. These tools help you prototype faster, write cleaner code, and reduce boilerplate. 📘 Full documentation is available online: UniUtils Docs Installation Option 1: Unity Package Manager (UPM) Open the Package Manager, click the \"+\" icon, select Add package from git URL... , and enter: https://github.com/m-gebhard/uni-utils.git Option 2: Unity Package Download the latest release from the repository and import the Unity Package directly into your project. Compatibility Supports Unity 2023.1 and newer . Contributing 🖐️ Contributions and feedback are welcome! Please open issues or submit pull requests on the GitHub repository . License This project is licensed under the MIT License . Disclaimer UniUtils is an independent library and is not affiliated with Unity Technologies or endorsed by Unity in any way."
  }
}